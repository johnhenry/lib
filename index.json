[ { "title": "implode", "url": "bash/implode/0.0.0", "content": " John Henry implode@0.0.0 Move file into folder of same name (minus the extension). (mac) (linux) " }, { "title": "cat64", "url": "bash/cat64/0.0.0", "content": " John Henry cat64@0.0.0 Create and prefix base64 representation of a file. (mac/linux) " }, { "title": "deny", "url": "bash/deny/0.0.0", "content": " John Henry confirm@0.0.0 exit 0 if a 'y' or 'Y' is typed otherwise exit 1 (mac) (linux) " }, { "title": "prompt", "url": "bash/prompt/0.0.0", "content": " John Henry prompt@0.0.0 prompt Q -> Ask question Q and print result (mac) (linux) " }, { "title": "explode", "url": "bash/explode/0.0.0", "content": " John Henry explode@0.0.0 Move items from child folder into current folder and delete child folder. (mac/linux) " }, { "title": "whichdir", "url": "bash/whichdir/0.0.0", "content": " John Henry whichdir@0.0.0 Get the parent directory of a given executable. (mac/linux) " }, { "title": "confirm", "url": "bash/confirm/0.0.0", "content": " John Henry confirm@0.0.0 exit 0 if a 'y' or 'Y' is typed otherwise exit 1 (mac) (linux) " }, { "title": "gitflush", "url": "bash/gitflush/0.0.0", "content": " John Henry gitflush@0.0.0 git add . git commit -m &lt;given args&gt; git push (mac/linux) " }, { "title": "codir", "url": "bash/codir/0.0.0", "content": " John Henry codir@0.0.0 Open directory in visual studio code . Create directory if it does not already exist. (mac/linux) " }, { "title": "universal-no-margins", "url": "css/universal-no-margins/0.0.0", "content": " John Henry Universal No Margins CSS utility that removes all margins from the page. See Margin considered harmful . Usage: &lt;link rel= &quot;stylesheet&quot; href= &quot;../universal-no-margins/0.0.0/index.css&quot; /&gt; " }, { "title": "hide-n-show", "url": "css/hide-n-show/0.0.0", "content": " John Henry Hide-N-Show CSS Utilities to control visibility of elements /landscape.css Utility classes to hide elements that had an element, unless the viewport is in landscape mode. This is useful to &quot;progressively enhance&quot; mobile-first applications. Usage: &lt;link rel= &quot;stylesheet&quot; href= &quot;../hide-n-show/0.0.0/landscape.css&quot; /&gt; &lt;nav&gt; Always Visible &lt;span class= &quot;hide-n-show-landscape&quot; &gt; [Only visible in landscape mode] &lt;/span&gt; &lt;/nav&gt; Control visible display property by using hide-n-show-landscape-&lt;display value&gt; Values supported: block flex grid inline inline-block inline-flex inline-grid " }, { "title": "universa-border-debug", "url": "css/universa-border-debug/0.0.0", "content": " John Henry Universal Border Debug CSS debugging tool color borders red, green, or blue. This is useful for visual debugging and should not be used in production code. Usage: &lt;link rel= &quot;stylesheet&quot; href= &quot;../universal-border-debug/0.0.0/red.css&quot; /&gt; &lt;!-- OR --&gt; &lt;link rel= &quot;stylesheet&quot; href= &quot;../universal-border-debug/0.0.0/green.css&quot; /&gt; &lt;!-- OR --&gt; &lt;link rel= &quot;stylesheet&quot; href= &quot;../universal-border-debug/0.0.0/blue.css&quot; /&gt; " }, { "title": "css-variables-frame-range", "url": "css/css-variables-frame-range/0.0.0", "content": " John Henry Var-In-Frame-Range The purpose of this library is to provide a way to specify a range for an element and and apply a result to its css properties, based on whether on not the value of an independent variable is within the specified range. --in-frame-range , represents whether or not the --frame-current is within the range of an element, as defined by custome properties --frame-min and --frame-max . A goal of this library to minimize the use of javascript. Once the initial Usage Setup Import ./index.css (or ./inclusive.css ) containing the var--in-frame-range class. Give any elements you wish to control said class. Provide a --frame-current custom property to the parent of said elements. Provide --frame-min and --frame-max variables to each of element (Set --frame-max &gt; --frame-min ) Use the calculated --in-frame-range and --not-in-frame-range custom properties to control other css properties (e.g. opacity:var(--in-frame-range) ) Use javascript to adjust the value of the --frame-current custom property. Value If --frame-current is within the range defined by --frame-min and --frame-max , its value is 1, and 0 otherwise. Because --in-frame-range is an integer, many properties (e.g. visibility , display ) cannot be manipulated as they require values other than 0 and 1. visibility can be emulated by passing the --in-frame-range value to opacity , as this takes an integer between 0 and 1. Additionally, one can move objects on and off screen by manipulating the value of --in-frame-range to control the (absolute) position of an element. @import &quot;./index.css&quot; ; : has( .var--in-frame-range ) { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old This syntax is used to refer to the parent element. It is not currently supporated in any major browser. https://developer.mozilla.org/en-US/docs/Web/CSS/:has bash/ config/ css/ demos/ html/ js/ scripts/ template/ templates/ ts/ vendor/ position : relative ; --frame-current: 0 ; } .var--in-frame-range { position : absolute ; opacity : var(--in-frame-range); top : calc(var(--not-in-frame-range) _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor 100vh ); transition : opacity 0.25s , top 0.25s ; } .item-1 { --frame-min: 0 ; --frame-max: 3 ; } .item-1 :before { content : &quot;I&#39;m show up when --frame-current has a value between 0 and 3&quot; ; } .item-2 { --frame-min: 4 ; --frame-max: 7 ; } .item-2 :before { content : &quot;I&#39;m show up when --frame-current has a value between 4 and 7&quot; ; } Other Values Inverse For convinience, the library also provides a custom property, --not-in-frame-range as the inverse of --in-frame-range . Exlclusion Importing ./exclusive.css gives access to the var--in-frame-range_exclusive class. It provides the custom properties --in-frame-range_exclusive and --not-in-frame-range_exclusive , which function like the others, but with the bounds of the range excluded. " }, { "title": "css-model-presentation", "url": "js/css-model-presentation/", "content": " John Henry hij(?:_([^_]+)_)* hij(?:_([^_]+)) hij_lmn_isaf_asearew " }, { "title": "tester", "url": "js/tester/0.0.0", "content": " John Henry Tester ../js/tester@latest/index.mjs Tester is a javascript testing framework based on Tape . Like Tape, tester can be run directly using node without any additional binaries or transformations. produces output using the standard Test Anything Protocol . Unlike Tape, tester can be run directly in the browser or using deno without any additional binaries/transformations, along with node. uses external assertions and makes it easy to write your own. API Tester's API consist of two manin components: The &quot;tester&quot; function acts on a group of assertions. The assertions themselves, which return errors if a given condition is not satisfied. Tester The tester function is the default export. It takes as its only argument a [possibly asynchronous] generator. We call this a &quot;test&quot;. Results of assertions are yielded from within the body of a test. import tester from &quot;./index.mjs&quot; ; tester ( function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor () { yield /*some assertion result*/ ; yield /*some other assertion result*/ ; } ) ; Assertions The named exports are assertions. Call them within a test and yield their results. import tester , { ok , notok } from &quot;./index.mjs&quot; ; tester ( function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor () { yield ok ( true ) ; yield notok ( false ) ; } ) ; Included Assertions Besides ok and notok, there are a number of assertions included: ok -- test passes if and only if the given argument to a test is TRUTHY. notok -- test passes if and only if the given argument to a test is FALSH. equal -- test passes if and only if the two given arguments are THE SAME object. notequal -- test passes if and only if the two given arguments are NOT THE SAME object. pass -- test ALWAYS PASSES fail -- test ALWAYS FAILS subtestpass -- test passes if and only if the given argument is a test in which ALL THE ASSERTIONS PASS. subtestfail -- test passes if and only if the given argument is a test in which AT LEAST ONE ASSERTION FAILS. throws -- test passes if and only if the given function THROWS AN ERROR when called doesnotthrow -- test passes if and only if the given function DOES NOT THROW AN ERROR when called plan When using the run function, the first argument passed to given generator is a function. We'll call it &quot;plan&quot;, but you can name it anyting you like (&quot;expect&quot;, &quot;assertions&quot;, etc.) When plan is called with an integer, it dictates the number of expected assertions in a given test function. import tester, { ok } from &quot;./index.mjs&quot;; tester ( function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor (plan) { plan ( 1 ) ; yield ok ( true ) ; } ) ; Creating Assertions When creating assertions, use the examples in ./assertions for inspiration. Here are a few things to keep in mind: Assertions are functions that test for a desired conditon. If the given conditions meet the desired conditions, an accepted message is returned. Otherwise, an instance of TestError is returned. import TestError from &quot;./testerror.mjs&quot; ; const assertion = ( /*given conditions*/ ) =&gt;{ if ( /*conditions are met*/ ) { return /*some message*/ ; } return new TestError ( /*some message*/ ) ; } Conventions This library follows a specific convetion for its assertions. It's recommended that you follow these conventions when creating your own assertions, but feel free to come up with your own. The last item is an operator string , which is used for the TAP protocol and can be overridden. The next-to-last item is a default expected message that can also be overridden. The preceeding arguments are given conditions to be tested. The returned TestError is constructed using the default expected message along with an object detailing the difference between what's expected and what's not. import TestError from &quot;./testerror.mjs&quot; ; const assertion = ( /*given conditions*/ , message , operatorString) =&gt;{ if ( /*conditions are met*/ ) { return message ; } return new TestError (message , /*some object*/ )) ; } TestError API The test error is constructed with two items: An expected messages An object who's key-value pairs are displayed as part of TAP output Tester A context-independent testing framework inspired by tape . context-agnostic Tests run in same context as your application. No special executables needed. TAP Output Tester outputs to the console using a partial implementation of the Test Anything Protocol . Usage The default export of ./index.mjs is an asynchronous function, tester , that takes a test in the form of an asynchronous iterator. import tester from &quot;./index.mjs&quot; ; await tester (async function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor () { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old define test here scripts/ } ) ; Title Optionally tester takes a string as it's first argument. This will be printed out before each test. import tester from &quot;./index.mjs&quot; ; await tester ( &quot;test title&quot; , async function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor () { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old define test here scripts/ } ) ; Definition and format When creating a test, simply yield the result of an assertion. import tester from &quot;./index.mjs&quot; ; import ok from &quot;./assertions/ok.mjs&quot; ; await tester ( &quot;test title&quot; , async function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor () { yield ok ( true ) ; } ) ; There are 7 built in assertions included alongside the default export for convinience. import tester , { ok , notok , equal , notequal , deepequal , pass , fail , } from &quot;./index.mjs&quot; ; with plan argument The first argument to the test is a plan function which is used to announce then number of tests before they take place via TAP. import tester from &quot;./index.mjs&quot; ; import ok from &quot;./assertions/ok.mjs&quot; ; await tester ( &quot;test title&quot; , async function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor (plan) { plan ( 1 ) ; yield ok ( true ) ; } ) ; assetions Assertions are functions. They take any number of arguments and return either a success message string or an instance of TestError (&quot;/testerror.mjs&quot;). included assertions ok import { ok } from &quot;/index.mjs&quot; ; const result = ok ( true ) ; if (result instanceof Error) { throw result ; } notok import { notok } from &quot;/index.mjs&quot; ; const result = notok ( false ) ; if (result instanceof Error) { throw result ; } equal import { equal } from &quot;/index.mjs&quot; ; const result = equal ( true , true ) ; if (result instanceof Error) { throw result ; } notequal import { notequal } from &quot;./index.mjs&quot; ; const result = notequal ( true , false ) ; if (result instanceof Error) { throw result ; } deepequal import { deepequal } from &quot;./index.mjs&quot; ; const result = deepequal ( { a : true }, { a : true } ) ; if (result instanceof Error) { throw result ; } pass import { pass } from &quot;./index.mjs&quot; ; const result = pass () ; if (result instanceof Error) { throw result ; } fail import { fail } from &quot;./index.mjs&quot; ; const result = fail () ; if (result instanceof Error) { throw result ; } subtestpass import { subtestpass , pass } from &quot;./index.mjs&quot; ; const result = await subtestpass ( function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor () { yield pass () ; } ) ; if (result instanceof Error) { throw result ; } subtestfail import { subtestfail , fail } from &quot;./index.mjs&quot; ; const result = await subtestfail ( function _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor () { yield fail () ; } ) ; if (result instanceof Error) { throw result ; } creating external assertions Assertions have the following general form: export default (... args ) =&gt; { if ( /*test of args passes*/ ) { // return a string to indicate success. } else { // return instance of TestError } } TAPRunner, print, run The file &quot;/TAPRunner.mjs&quot; export methods &quot;print&quot; and &quot;run&quot;. &quot;print&quot; functions similarly to the default export of &quot;index.mjs&quot; -- both of which rely on &quot;run&quot; to execute underlying code. When called with as single argument (a test), &quot;run&quot; yields only the results of the test (string or Error) without additional processing. " }, { "title": "DOM-nodes-to-text", "url": "js/DOM-nodes-to-text/0.0.0", "content": " John Henry Dom Nodes to text Transform dom nodes into text. This is extremely useful when logging DOM nodes as they are often logged &quot;live&quot; meaning that when you look at the console, you will see the latest state; not the state at the time of logging. Usage &lt;ul id= &quot;list&quot; &gt; &lt;li&gt; one &lt;/li&gt; &lt;li&gt; two &lt;/li&gt; &lt;li&gt; three &lt;/li&gt; &lt;/ul&gt; &lt;script type= &quot;module&quot; &gt; import domNodesToText from &quot;..&quot; ; console . log ( domNodesToText ( document . querySelector ( &quot;#list&quot; ))) ; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old logs &lt;ul id=&quot;li&quot;&gt; &lt;li&gt;one&lt;/li&gt; &lt;li&gt;two&lt;/li&gt; &lt;li&gt;three&lt;/li&gt; &lt;/ul&gt; bash/ config/ css/ demos/ html/ js/ scripts/ template/ templates/ ts/ vendor/ &lt;/script&gt; Multiple Nodes Use the spread operatore to turn lists of nodes into text console . log ( domNodesToText (... document . querySelectorAll ( &quot;li&quot; ))) ; /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old logs &lt;li&gt;one&lt;/li&gt; &lt;li&gt;two&lt;/li&gt; &lt;li&gt;three&lt;/li&gt; bash/ config/ css/ demos/ html/ js/ scripts/ template/ templates/ ts/ vendor/ " }, { "title": "css-model-click-cycle", "url": "js/css-model-click-cycle/0.0.0", "content": " John Henry CSS Model:Click Cycle Attaching this to an element detects when children are clicked and cycels a variable through a series of values defined on them. Usage Importing the global modules attaches it to the it to the HTML element with a default prefix of &quot;input&quot;. When clicked, if a child has the attribute &quot;data-custom-property&quot; defined, a custom property related to the attribute value cycles through the valued defined in the &quot;data-values&quot; property. &lt;html style= &quot;--input-PROPERTYNAME-str:0;&quot; &gt; &lt;script type= &quot;module&quot; src= &quot;./global.mjs&quot; &gt;&lt;/script&gt; &lt;style&gt; button ::before { content : var(--input-PROPERTYNAME-str); } &lt;/style&gt; &lt;button data-custom-property= &quot;PROPERTYNAME&quot; data-custom-property-values= &quot;0;1;2&quot; &gt;&lt;/button&gt; &lt;/html&gt; Note that the custom property must be initialized on the target element Advanced Usage Import the constructor to limit the scope of the property or change the prefix. &lt;script type= &quot;module&quot; &gt; import CSSModelClickCycle from &quot;./index.mjs&quot; ; new CSSModelClickCycle ( document . querySelector ( &quot;button&quot; ) , &quot;clicked-var&quot; ) ; &lt;/script&gt; &lt;style&gt; button ::before { content : var(--input-clicked-var-str); } &lt;/style&gt; &lt;button data-custom-property= &quot;clicked-var&quot; data-custom-property-values= &quot;0;1;2&quot; style= &quot;--input-clicked-var-str:0;&quot; &gt;&lt;/button&gt; Demos demo " }, { "title": "toss", "url": "js/toss/0.0.0", "content": " John Henry Toss Throw as a function. Useful in places where you want to throw an error, but need an expression. Usage import toss from &quot;...&quot; ; const doAThing = ( arg = toss ( new Error ( &quot;1st arg required&quot; )) , result = &quot;done&quot; ) =&gt; { // do a thing... console . log ( ` ${ arg } ${ result } ` ) ; }; doAThing ( &quot;something&quot; ) ; // logs &quot;something done&quot;; doAThing () ; // throws &quot;1st arg required&quot; error " }, { "title": "returnTimeout", "url": "js/returnTimeout/0.0.0", "content": " John Henry returnTimeout returnTimeout has a similar API to set the built-in setTimeout function. Instead of returning and ID of a timeout, it returns a promise fulfilled with the value of the function when called. Note: there is currently no official way to cancel a promise in javascript. import returnTimeout from &quot;..&quot; ; const joinStrs = (... str ) =&gt; str . join ( &quot; &quot; ) ; console . log (await returnTimeout (joinStrs , 4500 , &quot;hello&quot; , &quot;world&quot; )) ; // logs hello world after 4.5 seconds " }, { "title": "mod", "url": "js/mod/0.0.0", "content": " John Henry mod The modulus operator (%') in math works slightly differently than it does in javascript (%). That is in math, it's a binary operation that returns a positive number. In javascript, the number can be negative. This &quot;mod&quot; function works more like the math version. mod = (a, b) =&gt; a %' b " }, { "title": "liedenticon", "url": "js/liedenticon/0.0.4", "content": " John Henry Liedenticon Transform a string into a unique image. Liedenticon vs Identicon Liedenticon is a ripoff of refinement of Identicon with a few major differences. Modules Liedenticons separates image generation into two separate classes. One to generate SVGs and another to generate PNGs. Common JS Module const { SVG , PNG } = require ( &quot;liedenticons&quot; ) ; ES6 Module import { SVG , PNG } from &quot;liedenticon/js&quot; ; ES6 Module &lt;script src= &quot;../vendor/liedenticon/browser.js&quot; &gt;&lt;/script&gt; &lt;script&gt; const { SVG , PNG } = window . Liedenticons ; &lt;/script&gt; SVG Class By default the SVG module will generate an svg string to be embedded in a document. console . log ( new SVG ( &quot;...&quot; )) ; //logs &quot;&lt;svg ...&quot; Passing a truthy paramater to the &quot;toString&quot; method will create a string that can be used directly as the source attribute of an image. console . log ( new SVG ( &quot;...&quot; ). toString ( true )) ; //logs &quot;data:image/svg+xml;utf8,&lt;svg ...&quot; Passing a second truthy paramater returns the base 64 encoded string. console . log ( new SVG ( &quot;...&quot; ). toString ( true , true )) ; //logs &quot;data:image/svg+xml;base64,...&quot; PNG ModuClassle The PNG module will generate a base64 string by default with a preamble attached. console . log ( new SVG ( &quot;...&quot; )) ; //logs &quot;data:image/svg+png;base64,...&quot; Passing a falsy parameter to &quot;toString&quot; method will drop the preamble. console . log ( new SVG ( &quot;...&quot; ). toString ( false )) ; //logs &quot;...&quot; Future Both the SVG and PNG modules both inherit from an internal class called Graphic. It should be easy to extend this object and support other fomats by implementing a &quot;renderImage&quot; and a &quot;toString&quot; method. import Graphics from &quot;liedenticon/graphic&quot; ; class NewFormat extends Graphics { renderImage (hash , size , padding , background , foreground) { //... } toString () { //... } } Color Support In addition to using an array for colors, Liedenticons supports 1, 2, 3, 4, 6, and 8 digit hex color codes. 2, 4, and 8 digit colors support alpha channels Padding vs Margin We've replaced the &quot;margin&quot; option &quot;padding&quot; as it this more closely fits this definition used by most web developers. Padding Percentage Padding also supports values given as percentage strings. const svg = new SVG ( &quot;...&quot; , { padding : &quot;20%&quot; } ) ; Classes SVG ⇐ liedenticon/graphic PNG ⇐ liedenticon/graphic SVG ⇐ liedenticon/graphic Kind : global class Extends : liedenticon/graphic new SVG(hash, options) A hash represented as an SVG Param Type Description hash string unique string options object graphicical options Example import { SVG } from &quot;Liedenticons&quot; ; const svg = document . createElement ( &quot;SVG&quot; ) ; document . appendChild (svg) ; svg . outerHTML = new SVG ( &quot;efb8c90a13f7a1fdc4910&quot; ) ; PNG ⇐ liedenticon/graphic Kind : global class Extends : liedenticon/graphic new PNG(hash, options) A hash represented as an PNG Param Type Description hash string unique string options object graphicical options Example import { PNG } from &quot;Liedenticons&quot; ; const img = document . createElement ( &quot;IMG&quot; ) ; img . src = new PNG ( &quot;efb8c90a13f7a1fdc4910&quot; ) ; document . appendChild (img) ; " }, { "title": "setIntervalPatient", "url": "js/setIntervalPatient/0.0.0", "content": " John Henry setIntervalPatient setIntervalPatient has a similar API to set the built-in setIntervalPatient function, but it waits for the previous instance callback to be completed before calling the next. Additonally clearIntervalPatient returns true if the id exists, and false if it does not. import setIntervalPatient , { clear as clearIntervalPatient } from &quot;..&quot; ; const id = setIntervalPatient (() =&gt; { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old function that must finish bash/ config/ css/ demos/ html/ js/ scripts/ template/ templates/ ts/ vendor/ }, 100 ) ; setTimeout (() =&gt; clearIntervalPatient (id) , 2000 ) ; " }, { "title": "broadcast-channel-worker", "url": "js/broadcast-channel-worker/0.0.0", "content": " John Henry Broadcast Channel Worker Communicate across windows " }, { "title": "css-model", "url": "js/css-model/0.0.0", "content": " John Henry CSS Model CSSModel is a model for: [declaratively] defining the behavior of certain CSS custom properties; using those properties to create appications that are laregly unaware of underlying [imperative] Javascript. Usage This is a base class and so, you will not likely use it directly; but rather a descendent. constructors general take a element and will define custom properties on that element to be inherited by the element's children. WHy? " }, { "title": "cbor", "url": "js/cbor/0.0.0", "content": " John Henry Concise Binary Object Representation (CBOR) Based on the specification here ( old ) API encode function decode function Tag class Types Booleans, null, undefined Numbers Strings // NOTE: emoji don't work -- represented by more than one byte // const input =&quot;☃★♲&quot;; Bytes Integers Arrays Objects/Maps Tags Testing deno run --allow-read test.mjs " }, { "title": "define-component-by-content.component", "url": "js/define-component-by-content.component/0.0.0", "content": " John Henry Define Component By Content HTML Doesn't quite work yet -- slots don't work unless part of the shadow dom? Is the part of the specificaion? See: js/definetag/0.0.0/ Usage " }, { "title": "localstorage-cycler", "url": "js/localstorage-cycler/0.0.0", "content": " John Henry LocalStorage Cycler Cycle local storage values through a given list of strings Usage import localStorageCycler from &quot;?&quot; ; const updateLocalStorage = localStorageCycler ( &quot;my-key&quot; , &quot;a&quot; , &quot;b&quot; , &quot;c&quot; ) ; The call to &quot;localStorageCycler&quot; checks for the existence of the key (&quot;my-key&quot;) in localStorage. and sets it to the first key (&quot;a&quot;) if not already set. When called, the &quot;updateLocalStorage&quot; function cycles the value associated with the key in localStorage through the given values (&quot;a&quot;, &quot;b&quot;, and &quot;c&quot;). The &quot;updateLocalStorage&quot; returns an object with the following keys: key - the associated local storage key value - the current value of the local storage item index - the current index of the local storage item result - the reuslt of an handler, if passed (see below) Change Handler To react to the change, pass a optional change handler as the second parameter to &quot;localStorageCycler&quot;. const onChange = ( { value , key , index , events } ) =&gt; console . log ( { value , key , index , events } ) ; const updateLocalStorage = localStorageCycler ( &quot;my-key&quot; , onChange , &quot;a&quot; , &quot;b&quot; , &quot;c&quot; ) ; The handler takes four parametes: the same, &quot;key&quot;, &quot;value&quot;, and &quot;index&quot; parameters returned from calling &quot;updateLocalStorage&quot; an &quot;events&quot; parameter -- an array of everything passed into the &quot;updateLocalStorage&quot; function OR an &quot;init&quot; CustomEvent if fired from the initial call to localStorageCycler. " }, { "title": "consent-buddy", "url": "js/consent-buddy/0.0.0", "content": " John Henry Consent Buddy Consent buddy provides a mechanism to: accept a user's response to a request for consent and via prompt (via DOM events) handle said response (generically) handle visibility of said dialog (via css custom property) record and replay the response without re-promppting the user (via local storage) " }, { "title": "character-count", "url": "js/character-count/0.0.0", "content": " John Henry character count Create a character frequency map from a string " }, { "title": "mean-map", "url": "js/mean-map/0.0.0", "content": " John Henry Mean Map Convert a list of numbers into an array of mean values. " }, { "title": "query-container.component", "url": "js/query-container.component/0.0.0", "content": " John Henry Query Container HTML Component Containter that changes based on a given media query Inspired by: https://github.com/tabvengers/spicy-sections Example usage Usage Single query: This following will produce an ordered list with class name 'ordered' and blue text when the window's width is between 400px and 900px. &lt;script type= &quot;module&quot; src= &quot;https://johnhenry.github.io/lib/js/define-component.component/0.0.0/global.mjs&quot; &gt;&lt;/script&gt; &lt;define-component name= &quot;query-component&quot; src= &quot;./index.mjs&quot; &gt;&lt;/define-component&gt; &lt;query-component default= &quot;ul&quot; query= &quot; [(min-width:300px) and (max-width:1200px)] ol.ordered[style=color:blue]; [(min-width:400px) and (max-width:600px)] ol.ordered[style=color:red]; &quot; &gt; &lt;li&gt; a &lt;/li&gt; &lt;li&gt; b &lt;/li&gt; &lt;li&gt; c &lt;/li&gt; &lt;/query-component&gt; " }, { "title": "negatablestring", "url": "js/negatablestring/0.0.0", "content": " John Henry Negatable Strings Ever wanted to literally subtract a string from another in your code? Eh,... didn't thinks so... But here's library that let's do that and then some! API String.prototype; Import the string polyfill to use library with regular strings. import &quot;./string-prototype.mjs&quot; ; scale; import { scale } from &quot;./index.mjs&quot; ; The scale function transfroms a string into a negatable string object. By default, the string representations are the same. &quot;string&quot; === scale ( &quot;string&quot; ). toString () ; Negative one (-1) can be passed as a second parameter to get a negated version of the given string&quot; &quot;string&quot; === scale ( &quot;string&quot; , -1 ). toString (). split ( &quot;&quot; ). reverse (). join ( &quot;&quot; ) ; NegatableString.prototype.toString(); By default, the string representation is simply the representation of the given string backwards. console . log ( scale ( &quot;string&quot; , -1 ). toString ()) ; // logs &quot;rts&quot; But this is not the full story. Negative characters chan be highlighted by passing a prefix parameter to toString method console . log ( scale ( &quot;string&quot; , -1 ). toString ( &quot;~&quot; )) ; // logs &quot;~r~t~s&quot; Prefixes and suffixes can be added for both &quot;negative&quot; and &quot;positive&quot; characters const nPrefix = &#39;&lt;span class=&quot;positive&quot;&gt;&#39; : const pPrefix = &#39;&lt;span class=&quot;negative&quot;&gt;&#39; : const suffix = &#39;&lt;/span&gt;&#39; : console ( scale ( &quot;string&quot; , -1 ). toString (nPrefix , suffix , pPrefix , suffix)) ; // logs &quot;&lt;span class=&quot;negative&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;negative&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;negative&quot;&gt;s&lt;/span&gt;&quot; NegatableString.prototype.consoleIterator(); Some consoles (Chrome, Deno, but not currently node) have log methods that allow styling accepting as their first argument a specifically formatted string; and as their subsequent arguements, style parameters. The &quot;consoleIterator&quot; method takes advantage of this. It produces an object that can be destructured into a call to console.log that will produced a result with characters colored according to their parity. console . log (... scale ( &quot;rts&quot; , -1 ). consoleIterator ( &quot;red&quot; )) ; // logs red &quot;rts&quot; on chrome and deno // logs unformatted &quot;rts&quot; on node Complex example multipe strings with consoleIterator; const HELLO = &quot;HELLO&quot; ; const GOODBYE = scale ( &quot;HELLO&quot; , -1 ) ; const COMBO = concat (HELLO , GOODBYE) ; const [string0 , ... colors0 ] = HELLO . consoleIterator () ; const [string1 , ... colors1 ] = GOODBYE . consoleIterator () ; const [string2 , ... colors2 ] = COMBO . consoleIterator () ; console . log (... HELLO . consoleIterator ()) ; console . log (... GOODBYE . consoleIterator ()) ; console . log (... COMBO . consoleIterator ()) ; console . log ( `(&quot; ${ string0 } &quot; + &quot; ${ string1 } &quot;) = &quot; ${ string2 } &quot;` , ... colors0 , ... colors1 , ... colors2 ) ; // logs &quot; concat Concatenating string with negative characters is where the magic happens. import { concat } from &quot;./index.mjs&quot; ; console . log ( concat ( &quot;hello&quot; , scale ( &quot;hello&quot; , -1 )). toString ()) ; //logs &quot;&quot; console . log ( concat ( scale ( &quot;http://&quot; , -1 ) , &quot;https://iamjohnhenry.com&quot; ). toString () ) ; //logs &quot;https://iamjohnhenry.com&quot; negater You may want to construct string where not all characters are negative or positive. import { negater } from &quot;./index.mjs&quot; ; console . log ( negater ( &quot;mi~ss~issippi&quot; ). toString ( &quot;~&quot; )) ; //logs &quot;mssippi&quot;. Note the ~s cancelled out the s and then the i cancelled the ~i console . log ( negater ( &quot;mi~ss~issippi&quot; ). toString ( &quot;~&quot; )) ; //logs &quot;mssippi&quot;. Note the ~s cancelled out the s and then the i cancelled the ~i equals Test if two strings represent the exact same charcters, in the same order, with the same parity import { equal } from &quot;./index.mjs&quot; ; console . log ( equal ( &quot;alpha&quot; , scale ( &quot;alpha&quot; ))) ; // true console . log ( equal ( &quot;beta&quot; , scale ( &quot;beta&quot; , -1 ))) ; //false " }, { "title": "polyfill-window.component", "url": "js/polyfill-window.component/0.0.0", "content": " John Henry Polyfill Global Polyfills a key on the global object. Usage Maunal Define class to be removed // file:///./custom-component.mjs export default class extends HTMLElement { ///... } &lt;script&gt; import defineComponent from &quot;https://johnhenry.github.io/lib/define-component.component/0.0.0/index.mjs&quot; ; globalThis . customElements . define ( &quot;define-component&quot; , defineComponent) ; &lt;/script&gt; &lt;define-component name= &quot;custom-component&quot; src= &quot;./custom-component.mjs&quot; &gt;&lt;/define-component&gt; &lt;custom-component&gt;&lt;/custom-component&gt; Automatic Use &quot;global&quot; import to automatically use component name &quot;define-component&quot; &lt;script type= &quot;module&quot; src= &quot;https://johnhenry.github.io/lib/polyfill-global.component/0.0.0/global.mjs&quot; &gt;&lt;/script&gt; &lt;polyfill-global &gt; Hide me until window load &lt;/custom-component&gt; " }, { "title": "simple-element", "url": "js/simple-element/0.0.0", "content": " John Henry textElement Create HTML Components using simple HTML Text strings. Creating elements The module provides two exports: shadowOpen and shadowClosed . Pass an HTML string to either to create an element derived from globalThis.HTMLElement . Use the resulting class as the second argument to globalThis.customElements.define . Each can be used as a regular function or as a tag function . Regular function usage import { shadowOpen } from &quot;./textElement.mjs&quot; ; const HTMLString = &quot;&lt;div&gt;I am HTML&lt;/div&gt;&quot; ; const SampleElementClass = shadowOpen (HTMLString) ; globalThis . customElements . define ( &quot;sample-element&quot; , SampleElementClass) ; Tag function usage import { shadowClosed } from &quot;./textElement.mjs&quot; ; globalThis . customElements . define ( &quot;sample-element&quot; , shadowClosed `&lt;div&gt;I am HTML&lt;/div&gt;` ) ; shadowOpen vs shadowClosed shadowOpen creates an element with an accessible shadowRoot. globalThis . customElements . define ( &quot;open-element&quot; , shadowOpen `&lt;div&gt;I am open&lt;/div&gt;` ) ; //... globalThis . console . log ( globalThis . document . getElementsByTagName ( &quot;open-element&quot; )[ 0 ]. shadowRoot ) ; //Logs element shadowClosed creates an element with an inaccessible shadowRoot. globalThis . customElements . define ( &quot;closed-element&quot; , shadowClosed `&lt;div&gt;I am open&lt;/div&gt;` ) ; //... globalThis . console . log ( globalThis . document . getElementsByTagName ( &quot;closed-element&quot; )[ 0 ]. shadowRoot ) ; //Logs null Composing elements Use the slot element within the HTML string to allow for other HTML elements to be embedded. globalThis . customElements . define ( &quot;composable-element&quot; , shadowOpen `&lt;div&gt;&lt;slot /&gt;&lt;/div&gt;` ) ; &lt;composable-element&gt; I&#39;m dynamic content &lt;/composable-element&gt; Renders like: &lt;div&gt; I&#39;m dynamic content &lt;/div&gt; Named Slots Used named slots to place multiple pieces content within an element. globalThis . customElements . define ( &quot;composable-element&quot; , shadowOpen `&lt;slot name=&quot;first&quot; /&gt;&lt;slot name=&quot;second&quot; /&gt;` ) ; &lt;composable-element&gt; &lt;span slot= &quot;second&quot; &gt; 2nd &lt;/span&gt; &lt;span slot= &quot;first&quot; &gt; 1st &lt;/span&gt; &lt;/composable-element&gt; Renders like: &lt;div&gt; &lt;span&gt; 1st &lt;/span&gt; &lt;br /&gt; &lt;span&gt; 2nd &lt;/span&gt; &lt;/div&gt; Styling Elements Elements can be styled by adding a style tag to the HTML string. Because the style tag exists within the shadowRoot, styles will only be applied within the element. const RedTextClass = shadowOpen `&lt;style&gt;*{color:red}&lt;/style&gt;&lt;slot /&gt;` ; Styling slotted elements Slotted elements exist outside of the shadowRoot and can be styled outside of the element. globalThis . customElements . define ( &quot;red-element&quot; , RedTextClass) ; &lt;style&gt; .blue { color : blue ; } &lt;/style&gt; &lt;red-element&gt; &lt;span class= &quot;blue&quot; &gt; This text is blue &lt;/span&gt; &lt;/red-element&gt; Using ::part() sudo-element Parts of the element intended to be the target of external styles can be marked with the part attribute. globalThis . customElements . define ( &#39;stylable-element&#39; , shadowOpen `&lt;div part=content&gt; I&#39;m stylable externally&lt;/div&gt;` ; &lt;style&gt; stylable-element :: part(content) { color : blue ; } &lt;/style&gt; &lt;stylable-element /&gt; " }, { "title": "setBackoff", "url": "js/setBackoff/0.0.0", "content": " John Henry Timers setIntervalWait setIntervalWait has a similar API to set the built-in setInterval function, but it waits for the previous instance callback to be completed before calling the next. Additonally clearIntervalWait returns true if the id exists, and false if it does not. import setInterval , { clear as cleaIntervalWait , } from &quot;./set-interval-wait.mjs&quot; ; const id = setInterval (() =&gt; { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old function that must finish bash/ config/ css/ demos/ html/ js/ scripts/ template/ templates/ ts/ vendor/ }, 100 ) ; setTimeout (() =&gt; clearIntervalWait (id) , 2000 ) ; setRetry setRetry has a similar API to set the built-in setTimeout and setInterval functions. The difference is that it will retry the callback if it fails (throws an error) at constant intervals. import setRetry , { clear as clearRetry } from &quot;./set-retry.mjs&quot; ; const id = setRetry (() =&gt; { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old function that may throw an error bash/ config/ css/ demos/ html/ js/ scripts/ template/ templates/ ts/ vendor/ }, 100 ) ; setBackoff setRetry has a similar API setRetry . The difference is that it will retry the callback if it fails (throws an error) at exponentially increasing intervals intervals. import setBackoff , { clear as clearBackoff } from &quot;./set-retry.mjs&quot; ; const id = setBackoff (() =&gt; { /bin /boot /data /dev /etc /home /imagegeneration /lib /lib32 /lib64 /lost+found /media /mnt /opt /proc /root /run /sbin /snap /srv /sys /tmp /usr /var /vmlinuz /vmlinuz.old function that may throw an error bash/ config/ css/ demos/ html/ js/ scripts/ template/ templates/ ts/ vendor/ }, 100 ) ; asyncTimeout import setTimeoutAsync from &quot;./set-timeout-async.mjs&quot; ; const result = await setTimeoutAsync ((arg) =&gt; arg , 100 , &quot;hello&quot; ) ; asyncRetryAsync import setRetryAsync from &quot;./set-retry-async.mjs&quot; ; const result = await setRetryAsync ((arg) =&gt; arg , 100 , &quot;hello&quot; ) ; asyncBackoffAsync import setBackoffAsync from &quot;./set-backoff-async.mjs&quot; ; const result = await setBackoffAsync ((arg) =&gt; arg , 100 , &quot;hello&quot; ) ; " }, { "title": "definetag", "url": "js/definetag/0.0.0", "content": " John Henry Define Component HTML Doesn't quite work yet -- slots don't work unless part of the shadow dom? Is the part of the specificaion? See: js/define-component-by-tag/0.0.0/ Usage " }, { "title": "symver-compare@latest", "url": "js/symver-compare@latest/", "content": " John Henry " }, { "title": "until-window-load", "url": "js/until-window-load/0.0.0", "content": " John Henry Until Window Load Declarative import to remove loading classes once the window has loaded. Useful for to avoid content flash for custom components that arrange content after loading. Usage Maunal Define class to be removed import removeLoadingClasses from &quot;https://johnhenry.github.io/lib/until-window-load/0.0.0/index.mjs&quot; ; removeLoadingClasses ( &quot;custom-loading-class&quot; ) ; .custom-loading-class { visibility : hidden ; } &lt;custom-component class= &quot;custom-loading-class&quot; &gt; Hide me until window load &lt;/custom-component &gt; Automatic Use &quot;global&quot; import to automatically use class name &quot;until-window-load&quot; &lt;script type= &quot;module&quot; src= &quot;https://johnhenry.github.io/lib/remove-loading-classes/0.0.0/global.mjs&quot; &gt;&lt;/script&gt; &lt;style&gt; .until-window-load { visibility : hidden ; } &lt;/style&gt; &lt;custom-component class= &quot;until-window-load&quot; &gt; Hide me until window load &lt;/custom-component &gt; " }, { "title": "log-dictionary", "url": "js/log-dictionary/0.0.0", "content": " John Henry Print Dictionary Print an object as a dictionary Usage import PrintDictionary from &quot;...&quot; ; const self = { foo : &quot;bar&quot; , baz : [ &quot;qux&quot; ] , quux : { foo : &quot;bar&quot; , baz : &quot;qux&quot; , quux : &quot;corge&quot; , }, self , }; printDictionary (self) ; " }, { "title": "router", "url": "js/router/0.0.0", "content": " John Henry Router A router stuable for routing events. Can be used standalone in service workers and certain service worker environements inicluding deno delploy or cloud flare workers " }, { "title": "css-model-audio-node", "url": "js/css-model-audio-node/0.0.0", "content": " John Henry CSS Model Audio Node Connect an auto Source to a CSS Model import CssModelAudio from &quot;./index.mjs&quot; ; const stream = await navigator . mediaDevices . getUserMedia ( { video : false , audio : true , } ) ; const context = new AudioContext () ; context . createMediaStreamSource (stream). connect ( new CssModelAudio (context)) ; .volume ::before { content : &quot;volume&quot; var(--audio-volume) &quot;frequency&quot; var(--audio-f-0) &quot;time domain&quot; var(--audio-td-0); } " }, { "title": "mongodb.com-api", "url": "js/mongodb.com-api/0.0.0", "content": " John Henry MongoDB.com API https://www.mongodb.com/developer/article/getting-started-deno-mongodb/#setting-up-the-mongodb-data-api " }, { "title": "define-component.component", "url": "js/define-component.component/0.0.0", "content": " John Henry Define Component HTML Component to define HTML components. Usage Maunal Define class to be removed // file:///./custom-component.mjs export default class extends HTMLElement { ///... } &lt;script&gt; import defineComponent from &quot;https://johnhenry.github.io/lib/define-component.component/0.0.0/index.mjs&quot; ; globalThis . customElements . define ( &quot;define-component&quot; , defineComponent) ; &lt;/script&gt; &lt;define-component name= &quot;custom-component&quot; src= &quot;./custom-component.mjs&quot; &gt;&lt;/define-component&gt; &lt;custom-component&gt;&lt;/custom-component&gt; Automatic Use &quot;global&quot; import to automatically use component name &quot;define-component&quot; &lt;script type= &quot;module&quot; src= &quot;https://johnhenry.github.io/lib/define-component.component/0.0.0/global.mjs&quot; &gt;&lt;/script&gt; &lt;define-component name= &quot;custom-component&quot; src= &quot;./custom-component.mjs&quot; &gt;&lt;/define-component&gt; &lt;custom-component&gt; I&#39;m a custom component! &lt;/custom-component&gt; " }, { "title": "cors-helper", "url": "js/cors-helper/0.0.0", "content": " John Henry CORS Helper This utility is used to help define CORS headers for a given request origin. API CreateCORSHelper Function (default export) The default export is a function that creates a CORS helper object given the following parameters: allowedOrigins -- array of origins that are be allowed to make CORS requests a string , a regex , or a URLPattern that's tested against the request origin instead of an array, this may be a function that takes a request and returns a boolean. one may also pass a value of &quot;true&quot; allow all origins deniedOrigins -- list of origins that are deined from making CORS requests Similar signature to that of allowedOrigins one may also pass a value of &quot;true&quot; deny all origins headers -- a heaaders init object or array used as the basis for headers set for allowed cors requests accessControlAllowOrigin -- function who's return value is used as the &quot;Access-Control-Allow-Origin&quot; header it takes as parameters: the request origin the match from (see allowedOrigins above) the full request object by default, it returns the request origin. You may choose to have it return &quot;*&quot; to , but this causes requests sent with credentials to fail. The CORS helper has the following methods that take a request object as a parameter: getHeadersInit -- returns a heaaders init array configured for CORS if the request is allowed, or an empty array if not. This is designed to be used to as a base for headers in most [non-OPTIONS] responses. getResponse -- returns a response with headers configured for CORS if the request is allowed, or a response with empty headers if not. You may pass a second parameter to overide the default &quot;ok&quot; message in the response. This is designed to be used to respond to OPTIONS requests. Example Usage // 0. Create helper object import CreateCORSHelper from &quot;...&quot; ; const helper = CreateCORSHelper ([ &quot;http://localhost:3000&quot; , new URLPattern ( { hostname : &quot;{:subdomain.}*example.com&quot; } ) , /./ , ]) ; const handler = (request) =&gt; { // 1. If the request method is &quot;OPTIONS&quot; // respond immediately with response object // returned by the helper&#39;s getResponse method if ( request . method === &quot;OPTIONS&quot; ) { return helper . getResponse (request) ; } // 2. Otherwise, construct a response object // using the array from the helper&#39;s // getHeadersInit method as a base for it&#39;s headers const otherHeades = [] ; const headers = new Headers ([ ... helper . getHeadersInit (request) , ... otherHeaders , ]) ; return new Response ( &quot;...&quot; , { headers , } ) ; }; " }, { "title": "random-generators", "url": "js/random-generators/0.0.0", "content": " John Henry Random Generators These are methods of generating a sample, x , for a given random variable, X . No guarantees are made as to the distribution of the random variable. Float X := [ 0, 1 ) () =&gt; Math . random () ; // R X := ( 0, 1 ] () =&gt; - ( Math . random () - 1 ) ; // -(R-1) X := [ 0, N ) (N) =&gt; Math . random () _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor N ; // R*N X := [ M, N ) (M , N) =&gt; Math . random () _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor (N - M) + M ; // R*(N-M)+M X := [ 1, Infinity ) () =&gt; -1 / ( Math . random () - 1 ) ; // -1/(R-1) X := ( 1, Infinity ] () =&gt; Math . random () _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor ( - 1 / Math . random ()) ; // R^(-1/R) Integer X := [ 1, N ] (N) =&gt; Math . ceil ( Math . random () _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor N) ; // ⌈R*N⌉ X := [ 0, N ] (N) =&gt; Math . floor ( Math . random () _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor N + 1 ) ; // ⌊R*N+1⌋ X := [ M, N ] (M , N) =&gt; Math . floor ( Math . random () _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor (N - M + 1 ) + M) ; // ⌊R*(N-M)+N⌋ Boolean X := { true, false } () =&gt; Math . random () &lt; 0.5 ; // R&lt;0.5 Multiset (Array) X := []:Array&lt; any &gt; (... A ) =&gt; A[ Math . floor ( Math . random () _search.html bash build.sh config consistency.md css demos favicon.ico html js jsconfig.json links-to-html.lua origins.mjs package-lock.json package.json readme.md script.sh scripts style.css tasks.md template templates test.json todo.md ts vendor A . length )] ; // A[⌊R*|A|⌋] Bytes X := TypedArray&lt; number &gt;(N) (N) =&gt; globalThis . crypto . getRandomValues ( new Uint8ClampedArray (N)) ; // g(N) " } ]
