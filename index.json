[ { "title": "explode", "url": "bash/explode/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h1&gt;explode@0.0.0&lt;/h1&gt; Move items from child folder into current folder and delete child folder. &lt;a href=&quot;./explode&quot; download=&quot;explode&quot;&gt;(mac/linux)&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "codir", "url": "bash/codir/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h1&gt;codir@0.0.0&lt;/h1&gt; Open directory in &lt;a href=&quot;https://code.visualstudio.com/&quot; target=&quot;_blank&quot;&gt;visual studio code&lt;/a &gt;. Create directory if it does not already exist. &lt;a href=&quot;./codir&quot; download=&quot;codir&quot;&gt;(mac/linux)&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "implode", "url": "bash/implode/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h1&gt;implode@0.0.0&lt;/h1&gt; Move file into folder of same name (minus the extension). &lt;a href=&quot;./implode.mac&quot; download=&quot;implode&quot;&gt;(mac)&lt;/a&gt; &lt;a href=&quot;./implode.linux&quot; download=&quot;implode&quot;&gt;(linux)&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "gitflush", "url": "bash/gitflush/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h1&gt;gitflush@0.0.0&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;git add .&lt;/li&gt; &lt;li&gt;git commit -m &amp;lt;given args&amp;gt;&lt;/li&gt; &lt;li&gt;git push&lt;/li&gt; &lt;/ul&gt; &lt;a href=&quot;./gitflush&quot; download=&quot;gitflush&quot;&gt;(mac/linux)&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "dobrew", "url": "bash/dobrew/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h1&gt;dobrew@0.0.0&lt;/h1&gt; &lt;ul&gt; &lt;li&gt;brew update&lt;/li&gt; &lt;li&gt;brew upgrade&lt;/li&gt; &lt;li&gt;brew upgrade --cask&lt;/li&gt; &lt;/ul&gt; &lt;a href=&quot;./dobrew&quot; download=&quot;dobrew&quot;&gt;(mac/linux)&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "whichdir", "url": "bash/whichdir/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h1&gt;whichdir@0.0.0&lt;/h1&gt; Get the parent directory of a given executable. &lt;a href=&quot;./whichdir&quot; download=&quot;whichdir&quot;&gt;(mac/linux)&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "cat64", "url": "bash/cat64/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt; &lt;h1&gt;cat64@0.0.0&lt;/h1&gt; Create and prefix base64 representation of a file. &lt;a href=&quot;./cat64&quot; download=&quot;cat64&quot;&gt;(mac/linux)&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "css-variables-frame-range", "url": "css/css-variables-frame-range/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;var-in-frame-range&quot;&gt;Var-In-Frame-Range&lt;/h1&gt; &lt;p&gt;The purpose of this library is to provide a way to specify a range for an element and and apply a result to its css properties, based on whether on not the value of an independent variable is within the specified range.&lt;/p&gt; &lt;p&gt;&lt;code&gt;--in-frame-range&lt;/code&gt;, represents whether or not the &lt;code&gt;--frame-current&lt;/code&gt; is within the range of an element, as defined by custome properties &lt;code&gt;--frame-min&lt;/code&gt; and &lt;code&gt;--frame-max&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A goal of this library to minimize the use of javascript. Once the initial&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;Import &lt;code&gt;./index.css&lt;/code&gt; (or &lt;code&gt;./inclusive.css&lt;/code&gt;) containing the &lt;code&gt;var--in-frame-range&lt;/code&gt; class.&lt;/li&gt; &lt;li&gt;Give any elements you wish to control said class.&lt;/li&gt; &lt;li&gt;Provide a &lt;code&gt;--frame-current&lt;/code&gt; custom property to the parent of said elements.&lt;/li&gt; &lt;li&gt;Provide &lt;code&gt;--frame-min&lt;/code&gt; and &lt;code&gt;--frame-max&lt;/code&gt; variables to each of element (Set &lt;code&gt;--frame-max&lt;/code&gt; &amp;gt; &lt;code&gt;--frame-min&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;Use the calculated &lt;code&gt;--in-frame-range&lt;/code&gt; and &lt;code&gt;--not-in-frame-range&lt;/code&gt; custom properties to control other css properties (e.g. &lt;code&gt;opacity:var(--in-frame-range)&lt;/code&gt;)&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleDeclaration/setProperty&quot;&gt;Use javascript&lt;/a&gt; to adjust the value of the &lt;code&gt;--frame-current&lt;/code&gt; custom property.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;value&quot;&gt;Value&lt;/h3&gt; &lt;p&gt;If &lt;code&gt;--frame-current&lt;/code&gt; is within the range defined by &lt;code&gt;--frame-min&lt;/code&gt; and &lt;code&gt;--frame-max&lt;/code&gt;, its value is 1, and 0 otherwise.&lt;/p&gt; &lt;p&gt;Because &lt;code&gt;--in-frame-range&lt;/code&gt; is an integer, many properties (e.g. &lt;code&gt;visibility&lt;/code&gt;, &lt;code&gt;display&lt;/code&gt;) &lt;em&gt;cannot&lt;/em&gt; be manipulated as they require values other than 0 and 1.&lt;/p&gt; &lt;p&gt;&lt;code&gt;visibility&lt;/code&gt; can be emulated by passing the &lt;code&gt;--in-frame-range&lt;/code&gt; value to &lt;code&gt;opacity&lt;/code&gt;, as this takes an integer between 0 and 1.&lt;/p&gt; &lt;p&gt;Additionally, one can move objects on and off screen by manipulating the value of &lt;code&gt;--in-frame-range&lt;/code&gt; to control the (absolute) position of an element.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode css&quot;&gt;&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;im&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.css&amp;quot;&lt;/span&gt;; &lt;span class=&quot;in&quot;&gt;:&lt;/span&gt;has(&lt;span class=&quot;fu&quot;&gt;.var--in-frame-range&lt;/span&gt;) { &lt;span class=&quot;co&quot;&gt;/* This syntax is used to refer to the parent element.&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; It is not currently supporated in any major browser.&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; https://developer.mozilla.org/en-US/docs/Web/CSS/:has&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; */&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;relative&lt;/span&gt;; --frame-current: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; } &lt;span class=&quot;fu&quot;&gt;.var--in-frame-range&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;position&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;absolute&lt;/span&gt;; &lt;span class=&quot;kw&quot;&gt;opacity&lt;/span&gt;: var(--in-frame-range); &lt;span class=&quot;kw&quot;&gt;top&lt;/span&gt;: calc(var(--not-in-frame-range) _index.html bash build.sh config css demos.md html js jsconfig.json links-to-html.lua package-lock.json package.json package.old.json readme.md script.sh scripts search.html templates test.json todo.md ts vendor &lt;span class=&quot;dv&quot;&gt;100vh&lt;/span&gt;); &lt;span class=&quot;kw&quot;&gt;transition&lt;/span&gt;: opacity &lt;span class=&quot;dv&quot;&gt;0.25s&lt;/span&gt;, &lt;span class=&quot;dv&quot;&gt;top&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;0.25s&lt;/span&gt;; } &lt;span class=&quot;fu&quot;&gt;.item-1&lt;/span&gt; { --frame-min: &lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;; --frame-max: &lt;span class=&quot;dv&quot;&gt;3&lt;/span&gt;; } &lt;span class=&quot;fu&quot;&gt;.item-1&lt;/span&gt;&lt;span class=&quot;in&quot;&gt;:before&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;I&amp;#39;m show up when --frame-current has a value between 0 and 3&amp;quot;&lt;/span&gt;; } &lt;span class=&quot;fu&quot;&gt;.item-2&lt;/span&gt; { --frame-min: &lt;span class=&quot;dv&quot;&gt;4&lt;/span&gt;; --frame-max: &lt;span class=&quot;dv&quot;&gt;7&lt;/span&gt;; } &lt;span class=&quot;fu&quot;&gt;.item-2&lt;/span&gt;&lt;span class=&quot;in&quot;&gt;:before&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;content&lt;/span&gt;: &lt;span class=&quot;st&quot;&gt;&amp;quot;I&amp;#39;m show up when --frame-current has a value between 4 and 7&amp;quot;&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;other-values&quot;&gt;Other Values&lt;/h3&gt; &lt;h3 id=&quot;inverse&quot;&gt;Inverse&lt;/h3&gt; &lt;p&gt;For convinience, the library also provides a custom property, &lt;code&gt;--not-in-frame-range&lt;/code&gt; as the inverse of &lt;code&gt;--in-frame-range&lt;/code&gt;.&lt;/p&gt; &lt;h4 id=&quot;exlclusion&quot;&gt;Exlclusion&lt;/h4&gt; &lt;p&gt;Importing &lt;code&gt;./exclusive.css&lt;/code&gt; gives access to the &lt;code&gt;var--in-frame-range_exclusive&lt;/code&gt; class. It provides the custom properties &lt;code&gt;--in-frame-range_exclusive&lt;/code&gt; and &lt;code&gt;--not-in-frame-range_exclusive&lt;/code&gt;, which function like the others, but with the bounds of the range excluded.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "universa-border-debug", "url": "css/universa-border-debug/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;universal-border-debug&quot;&gt;Universal Border Debug&lt;/h1&gt; &lt;p&gt;CSS debugging tool color borders red, green, or blue.&lt;/p&gt; &lt;p&gt;This is useful for visual debugging and should not be used in production code.&lt;/p&gt; &lt;p&gt;Usage:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;../universal-border-debug/0.0.0/red.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- OR --&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;../universal-border-debug/0.0.0/green.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;&amp;lt;!-- OR --&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;../universal-border-debug/0.0.0/blue.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "universal-no-margins", "url": "css/universal-no-margins/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;universal-no-margins&quot;&gt;Universal No Margins&lt;/h1&gt; &lt;p&gt;CSS utility that removes all margins from the page.&lt;/p&gt; &lt;p&gt;See &lt;a href=&quot;https://mxstbr.com/thoughts/margin/&quot;&gt;Margin considered harmful&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Usage:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;../universal-no-margins/0.0.0/index.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "hide-n-show", "url": "css/hide-n-show/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;hide-n-show&quot;&gt;Hide-N-Show&lt;/h1&gt; &lt;p&gt;CSS Utilities to control visibility of elements&lt;/p&gt; &lt;h2 id=&quot;landscape.css&quot;&gt;/landscape.css&lt;/h2&gt; &lt;p&gt;Utility classes to hide elements that had an element, unless the viewport is in landscape mode.&lt;/p&gt; &lt;p&gt;This is useful to &amp;quot;progressively enhance&amp;quot; mobile-first applications.&lt;/p&gt; &lt;p&gt;Usage:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;link&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; rel=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; href=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;../hide-n-show/0.0.0/landscape.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;nav&amp;gt;&lt;/span&gt; Always Visible &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;hide-n-show-landscape&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; [Only visible in landscape mode] &lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Control visible display property by using &lt;code&gt;hide-n-show-landscape-&amp;lt;display value&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Values supported:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;block&lt;/li&gt; &lt;li&gt;flex&lt;/li&gt; &lt;li&gt;grid&lt;/li&gt; &lt;li&gt;inline&lt;/li&gt; &lt;li&gt;inline-block&lt;/li&gt; &lt;li&gt;inline-flex&lt;/li&gt; &lt;li&gt;inline-grid&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "define-component-by-content.component", "url": "js/define-component-by-content.component/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;define-component-by-content&quot;&gt;Define Component By Content&lt;/h1&gt; &lt;p&gt;HTML Doesn&#39;t quite work yet -- slots don&#39;t work unless part of the shadow dom? Is the part of the specificaion? See: js/definetag/0.0.0/&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "router", "url": "js/router/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;router&quot;&gt;Router&lt;/h1&gt; &lt;p&gt;A router stuable for routing events. Can be used standalone in service workers and certain service worker environements inicluding &lt;a href=&quot;https://deno.com/deploy&quot;&gt;deno delploy&lt;/a&gt; or &lt;a href=&quot;https://cloudflare.com/workers&quot;&gt;cloud flare workers&lt;/a&gt;&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "setBackoff", "url": "js/setBackoff/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;timers&quot;&gt;Timers&lt;/h1&gt; &lt;h2 id=&quot;setintervalwait&quot;&gt;setIntervalWait&lt;/h2&gt; &lt;p&gt;&lt;code&gt;setIntervalWait&lt;/code&gt; has a similar API to set the built-in &lt;code&gt;setInterval&lt;/code&gt; function, but it waits for the previous instance callback to be completed before calling the next. Additonally &lt;code&gt;clearIntervalWait&lt;/code&gt; returns true if the id exists, and false if it does not.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; setInterval&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; clear &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; cleaIntervalWait&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./set-interval-wait.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setInterval&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* function that must finish */&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;clearIntervalWait&lt;/span&gt;(id)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;setretry&quot;&gt;setRetry&lt;/h2&gt; &lt;p&gt;&lt;code&gt;setRetry&lt;/code&gt; has a similar API to set the built-in &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; functions. The difference is that it will retry the callback if it fails (throws an error) at constant intervals.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; setRetry&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; clear &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; clearRetry &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./set-retry.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setRetry&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* function that may throw an error */&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;setbackoff&quot;&gt;setBackoff&lt;/h2&gt; &lt;p&gt;&lt;code&gt;setRetry&lt;/code&gt; has a similar API &lt;code&gt;setRetry&lt;/code&gt;. The difference is that it will retry the callback if it fails (throws an error) at exponentially increasing intervals intervals.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; setBackoff&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; clear &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; clearBackoff &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./set-retry.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setBackoff&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* function that may throw an error */&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;asynctimeout&quot;&gt;asyncTimeout&lt;/h2&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; setTimeoutAsync &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./set-timeout-async.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;setTimeoutAsync&lt;/span&gt;((arg) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; arg&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;asyncretryasync&quot;&gt;asyncRetryAsync&lt;/h2&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; setRetryAsync &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./set-retry-async.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;setRetryAsync&lt;/span&gt;((arg) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; arg&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;asyncbackoffasync&quot;&gt;asyncBackoffAsync&lt;/h2&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; setBackoffAsync &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./set-backoff-async.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;setBackoffAsync&lt;/span&gt;((arg) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; arg&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "setIntervalPatient", "url": "js/setIntervalPatient/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h2 id=&quot;setintervalpatient&quot;&gt;setIntervalPatient&lt;/h2&gt; &lt;p&gt;&lt;code&gt;setIntervalPatient&lt;/code&gt; has a similar API to set the built-in &lt;code&gt;setIntervalPatient&lt;/code&gt; function, but it waits for the previous instance callback to be completed before calling the next.&lt;/p&gt; &lt;p&gt;Additonally &lt;code&gt;clearIntervalPatient&lt;/code&gt; returns true if the id exists, and false if it does not.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; setIntervalPatient&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; clear &lt;span class=&quot;im&quot;&gt;as&lt;/span&gt; clearIntervalPatient &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; id &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setIntervalPatient&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* function that must finish */&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;100&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;setTimeout&lt;/span&gt;(() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;clearIntervalPatient&lt;/span&gt;(id)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;2000&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "definetag", "url": "js/definetag/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;define-component&quot;&gt;Define Component&lt;/h1&gt; &lt;p&gt;HTML Doesn&#39;t quite work yet -- slots don&#39;t work unless part of the shadow dom? Is the part of the specificaion? See: js/define-component-by-tag/0.0.0/&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "negatablestring", "url": "js/negatablestring/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;negatable-strings&quot;&gt;Negatable Strings&lt;/h1&gt; &lt;p&gt;Ever wanted to literally subtract a string from another in your code? Eh,... didn&#39;t thinks so...&lt;/p&gt; &lt;p&gt;But here&#39;s library that let&#39;s do that and then some!&lt;/p&gt; &lt;h2 id=&quot;api&quot;&gt;API&lt;/h2&gt; &lt;h3 id=&quot;string.prototype&quot;&gt;String.prototype;&lt;/h3&gt; &lt;p&gt;Import the string polyfill to use library with regular strings.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./string-prototype.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;scale&quot;&gt;scale;&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; scale &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The &lt;em&gt;scale&lt;/em&gt; function transfroms a string into a negatable string object.&lt;/p&gt; &lt;p&gt;By default, the string representations are the same.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Negative one (-1) can be passed as a second parameter to get a negated version of the given string&amp;quot;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;split&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;reverse&lt;/span&gt;().&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;negatablestring.prototype.tostring&quot;&gt;NegatableString.prototype.toString();&lt;/h3&gt; &lt;p&gt;By default, the string representation is simply the representation of the given string backwards.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// logs &amp;quot;rts&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;But this is not the full story. Negative characters chan be highlighted by passing a prefix parameter to &lt;em&gt;toString&lt;/em&gt; method&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// logs &amp;quot;~r~t~s&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Prefixes and suffixes can be added for both &amp;quot;negative&amp;quot; and &amp;quot;positive&amp;quot; characters&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; nPrefix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;lt;span class=&amp;quot;positive&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; pPrefix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;lt;span class=&amp;quot;negative&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; suffix &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;#39;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;console&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;(nPrefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; suffix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; pPrefix&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; suffix))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// logs &amp;quot;&amp;lt;span class=&amp;quot;negative&amp;quot;&amp;gt;r&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;negative&amp;quot;&amp;gt;t&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;quot;negative&amp;quot;&amp;gt;s&amp;lt;/span&amp;gt;&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;negatablestring.prototype.consoleiterator&quot;&gt;NegatableString.prototype.consoleIterator();&lt;/h3&gt; &lt;p&gt;Some consoles (Chrome, Deno, but not currently node) have log methods that allow styling accepting as their first argument a specifically formatted string; and as their subsequent arguements, style parameters.&lt;/p&gt; &lt;p&gt;The &amp;quot;consoleIterator&amp;quot; method takes advantage of this. It produces an object that can be destructured into a call to console.log that will produced a result with characters colored according to their parity.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(...&lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;rts&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;consoleIterator&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// logs red &amp;quot;rts&amp;quot; on chrome and deno&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// logs unformatted &amp;quot;rts&amp;quot; on node&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Complex example multipe strings with consoleIterator;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; HELLO &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;HELLO&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; GOODBYE &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;HELLO&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; COMBO &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;(HELLO&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; GOODBYE)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; [string0&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;at&quot;&gt;colors0&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;HELLO&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;consoleIterator&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; [string1&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;at&quot;&gt;colors1&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;GOODBYE&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;consoleIterator&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; [string2&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;at&quot;&gt;colors2&lt;/span&gt;] &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;COMBO&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;consoleIterator&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(...&lt;span class=&quot;va&quot;&gt;HELLO&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;consoleIterator&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(...&lt;span class=&quot;va&quot;&gt;GOODBYE&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;consoleIterator&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(...&lt;span class=&quot;va&quot;&gt;COMBO&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;consoleIterator&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;vs&quot;&gt;`(&amp;quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;string0&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;&amp;quot; + &amp;quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;string1&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;&amp;quot;) = &amp;quot;&lt;/span&gt;&lt;span class=&quot;sc&quot;&gt;${&lt;/span&gt;string2&lt;span class=&quot;sc&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;vs&quot;&gt;&amp;quot;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;at&quot;&gt;colors0&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;at&quot;&gt;colors1&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; ...&lt;span class=&quot;at&quot;&gt;colors2&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// logs &amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;concat&quot;&gt;concat&lt;/h3&gt; &lt;p&gt;Concatenating string with negative characters is where the magic happens.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; concat &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;at&quot;&gt;concat&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;https://iamjohnhenry.com&amp;quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;() )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;https://iamjohnhenry.com&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;negater&quot;&gt;negater&lt;/h3&gt; &lt;p&gt;You may want to construct string where not all characters are negative or positive.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; negater &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;negater&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;mi~ss~issippi&amp;quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;mssippi&amp;quot;. Note the ~s cancelled out the s and then the i cancelled the ~i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;negater&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;mi~ss~issippi&amp;quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;~&amp;quot;&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;mssippi&amp;quot;. Note the ~s cancelled out the s and then the i cancelled the ~i&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;equals&quot;&gt;equals&lt;/h3&gt; &lt;p&gt;Test if two strings represent the exact same charcters, in the same order, with the same parity&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; equal &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;alpha&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;alpha&amp;quot;&lt;/span&gt;)))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// true&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;beta&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;scale&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;beta&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt;)))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "liedenticon", "url": "js/liedenticon/0.0.4", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;liedenticon&quot;&gt;Liedenticon&lt;/h1&gt; &lt;p&gt;Transform a string into a unique image.&lt;/p&gt; &lt;h2 id=&quot;liedenticon-vs-identicon&quot;&gt;Liedenticon vs Identicon&lt;/h2&gt; &lt;p&gt;Liedenticon is a &lt;del&gt;ripoff of&lt;/del&gt; refinement of &lt;a href=&quot;https://github.com/stewartlord/identicon.js/tree/master&quot;&gt;Identicon&lt;/a&gt; with a few major differences.&lt;/p&gt; &lt;h3 id=&quot;modules&quot;&gt;Modules&lt;/h3&gt; &lt;p&gt;Liedenticons separates image generation into two separate classes. One to generate SVGs and another to generate PNGs.&lt;/p&gt; &lt;h4 id=&quot;common-js-module&quot;&gt;Common JS Module&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; SVG&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; PNG &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;liedenticons&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;es6-module&quot;&gt;ES6 Module&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; SVG&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; PNG &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;liedenticon/js&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;es6-module-1&quot;&gt;ES6 Module&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;../vendor/liedenticon/browser.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; SVG&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; PNG &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;Liedenticons&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;svg-class&quot;&gt;SVG Class&lt;/h4&gt; &lt;p&gt;By default the SVG module will generate an svg string to be embedded in a document.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SVG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;&amp;lt;svg ...&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Passing a truthy paramater to the &amp;quot;toString&amp;quot; method will create a string that can be used directly as the source attribute of an image.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SVG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;data:image/svg+xml;utf8,&amp;lt;svg ...&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Passing a second truthy paramater returns the base 64 encoded string.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SVG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;data:image/svg+xml;base64,...&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;png-moduclassle&quot;&gt;PNG ModuClassle&lt;/h4&gt; &lt;p&gt;The PNG module will generate a base64 string by default with a preamble attached.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SVG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;data:image/svg+png;base64,...&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Passing a falsy parameter to &amp;quot;toString&amp;quot; method will drop the preamble.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SVG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;).&lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//logs &amp;quot;...&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;future&quot;&gt;Future&lt;/h4&gt; &lt;p&gt;Both the SVG and PNG modules both inherit from an internal class called Graphic. It should be easy to extend this object and support other fomats by implementing a &amp;quot;renderImage&amp;quot; and a &amp;quot;toString&amp;quot; method.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; Graphics &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;liedenticon/graphic&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; NewFormat &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; Graphics &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;renderImage&lt;/span&gt;(hash&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; size&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; padding&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; background&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; foreground) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//...&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;toString&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//...&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;color-support&quot;&gt;Color Support&lt;/h3&gt; &lt;p&gt;In addition to using an array for colors, Liedenticons supports 1, 2, 3, 4, 6, and 8 digit hex color codes. 2, 4, and 8 digit colors support alpha channels&lt;/p&gt; &lt;h3 id=&quot;padding-vs-margin&quot;&gt;Padding vs Margin&lt;/h3&gt; &lt;p&gt;We&#39;ve replaced the &amp;quot;margin&amp;quot; option &amp;quot;padding&amp;quot; as it this more closely fits this &lt;a href=&quot;https://www.w3schools.com/cSS/css_padding.asp&quot;&gt;definition&lt;/a&gt; used by most web developers.&lt;/p&gt; &lt;h4 id=&quot;padding-percentage&quot;&gt;Padding Percentage&lt;/h4&gt; &lt;p&gt;Padding also supports values given as percentage strings.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; svg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SVG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;...&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;20%&amp;quot;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;classes&quot;&gt;Classes&lt;/h2&gt; &lt;dl&gt; &lt;dt&gt; &lt;a href=&quot;#SVG&quot;&gt;SVG&lt;/a&gt; ⇐ &lt;code&gt;liedenticon/graphic&lt;/code&gt; &lt;/dt&gt; &lt;dd&gt; &lt;/dd&gt; &lt;dt&gt; &lt;a href=&quot;#PNG&quot;&gt;PNG&lt;/a&gt; ⇐ &lt;code&gt;liedenticon/graphic&lt;/code&gt; &lt;/dt&gt; &lt;dd&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;p&gt;&lt;a name=&quot;SVG&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id=&quot;svg-liedenticongraphic&quot;&gt;SVG ⇐ &lt;code&gt;liedenticon/graphic&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: global class&lt;br /&gt; &lt;strong&gt;Extends&lt;/strong&gt;: &lt;code&gt;liedenticon/graphic&lt;/code&gt;&lt;br /&gt; &lt;a name=&quot;new_SVG_new&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 id=&quot;new-svghash-options&quot;&gt;new SVG(hash, options)&lt;/h3&gt; &lt;p&gt;A hash represented as an SVG&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr class=&quot;header&quot;&gt; &lt;th&gt;Param&lt;/th&gt; &lt;th&gt;Type&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;hash&lt;/td&gt; &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &lt;td&gt;unique string&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;options&lt;/td&gt; &lt;td&gt;&lt;code&gt;object&lt;/code&gt;&lt;/td&gt; &lt;td&gt;graphicical options&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode js&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; SVG &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Liedenticons&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; svg &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;SVG&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(svg)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;svg&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;outerHTML&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;SVG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;efb8c90a13f7a1fdc4910&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;a name=&quot;PNG&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id=&quot;png-liedenticongraphic&quot;&gt;PNG ⇐ &lt;code&gt;liedenticon/graphic&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;&lt;strong&gt;Kind&lt;/strong&gt;: global class&lt;br /&gt; &lt;strong&gt;Extends&lt;/strong&gt;: &lt;code&gt;liedenticon/graphic&lt;/code&gt;&lt;br /&gt; &lt;a name=&quot;new_PNG_new&quot;&gt;&lt;/a&gt;&lt;/p&gt; &lt;h3 id=&quot;new-pnghash-options&quot;&gt;new PNG(hash, options)&lt;/h3&gt; &lt;p&gt;A hash represented as an PNG&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr class=&quot;header&quot;&gt; &lt;th&gt;Param&lt;/th&gt; &lt;th&gt;Type&lt;/th&gt; &lt;th&gt;Description&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr class=&quot;odd&quot;&gt; &lt;td&gt;hash&lt;/td&gt; &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &lt;td&gt;unique string&lt;/td&gt; &lt;/tr&gt; &lt;tr class=&quot;even&quot;&gt; &lt;td&gt;options&lt;/td&gt; &lt;td&gt;&lt;code&gt;object&lt;/code&gt;&lt;/td&gt; &lt;td&gt;graphicical options&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode js&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; PNG &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;Liedenticons&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; img &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;createElement&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;IMG&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;img&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;src&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;PNG&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;efb8c90a13f7a1fdc4910&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;appendChild&lt;/span&gt;(img)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "tester", "url": "js/tester/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;tester&quot;&gt;Tester&lt;/h1&gt; &lt;p&gt;../js/tester@latest/index.mjs&lt;/p&gt; &lt;p&gt;Tester is a javascript testing framework based on &lt;a href=&quot;https://github.com/substack/tape&quot;&gt;Tape&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Like Tape, tester&lt;/p&gt; &lt;ul&gt; &lt;li&gt;can be run directly using &lt;a href=&quot;https://nodejs.org&quot;&gt;node&lt;/a&gt; without any additional binaries or transformations.&lt;/li&gt; &lt;li&gt;produces output using the standard &lt;a href=&quot;https://testanything.org/&quot;&gt;Test Anything Protocol&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Unlike Tape, tester&lt;/p&gt; &lt;ul&gt; &lt;li&gt;can be run directly in the browser or using &lt;a href=&quot;https://deno.land&quot;&gt;deno&lt;/a&gt; without any additional binaries/transformations, along with node.&lt;/li&gt; &lt;li&gt;uses external assertions and makes it easy to write your own.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;api&quot;&gt;API&lt;/h2&gt; &lt;p&gt;Tester&#39;s API consist of two manin components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The &amp;quot;tester&amp;quot; function acts on a group of assertions.&lt;/li&gt; &lt;li&gt;The assertions themselves, which return errors if a given condition is not satisfied.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;tester-1&quot;&gt;Tester&lt;/h3&gt; &lt;p&gt;The tester function is the default export.&lt;/p&gt; &lt;p&gt;It takes as its only argument a [possibly asynchronous] generator. We call this a &amp;quot;test&amp;quot;.&lt;/p&gt; &lt;p&gt;Results of assertions are yielded from within the body of a test.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tester &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;tester&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*some assertion result*/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*some other assertion result*/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;assertions&quot;&gt;Assertions&lt;/h3&gt; &lt;p&gt;The named exports are assertions.&lt;/p&gt; &lt;p&gt;Call them within a test and yield their results.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tester&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; ok&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; notok &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;tester&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ok&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;notok&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;included-assertions&quot;&gt;Included Assertions&lt;/h4&gt; &lt;p&gt;Besides ok and notok, there are a number of assertions included:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;ok -- test passes if and only if the given argument to a test is TRUTHY.&lt;/li&gt; &lt;li&gt;notok -- test passes if and only if the given argument to a test is FALSH.&lt;/li&gt; &lt;li&gt;equal -- test passes if and only if the two given arguments are THE SAME object.&lt;/li&gt; &lt;li&gt;notequal -- test passes if and only if the two given arguments are NOT THE SAME object.&lt;/li&gt; &lt;li&gt;pass -- test ALWAYS PASSES&lt;/li&gt; &lt;li&gt;fail -- test ALWAYS FAILS&lt;/li&gt; &lt;li&gt;subtestpass -- test passes if and only if the given argument is a test in which ALL THE ASSERTIONS PASS.&lt;/li&gt; &lt;li&gt;subtestfail -- test passes if and only if the given argument is a test in which AT LEAST ONE ASSERTION FAILS.&lt;/li&gt; &lt;li&gt;throws -- test passes if and only if the given function THROWS AN ERROR when called&lt;/li&gt; &lt;li&gt;doesnotthrow -- test passes if and only if the given function DOES NOT THROW AN ERROR when called&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;plan&quot;&gt;plan&lt;/h3&gt; &lt;p&gt;When using the run function, the first argument passed to given generator is a function. We&#39;ll call it &amp;quot;plan&amp;quot;, but you can name it anyting you like (&amp;quot;expect&amp;quot;, &amp;quot;assertions&amp;quot;, etc.) When &lt;em&gt;plan&lt;/em&gt; is called with an integer, it dictates the number of expected assertions in a given test function.&lt;/p&gt; &lt;p&gt;import tester, { ok } from &amp;quot;./index.mjs&amp;quot;;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;at&quot;&gt;tester&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; (plan) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;plan&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ok&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;creating-assertions&quot;&gt;Creating Assertions&lt;/h2&gt; &lt;p&gt;When creating assertions, use the examples in &lt;em&gt;./assertions&lt;/em&gt; for inspiration. Here are a few things to keep in mind:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Assertions are functions that test for a desired conditon.&lt;/li&gt; &lt;li&gt;If the given conditions meet the desired conditions,&lt;/li&gt; &lt;li&gt;an accepted message is returned.&lt;/li&gt; &lt;li&gt;Otherwise, an instance of TestError is returned.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; TestError &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./testerror.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; assertion &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;co&quot;&gt;/*given conditions*/&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;co&quot;&gt;/*conditions are met*/&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*some message*/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;TestError&lt;/span&gt;(&lt;span class=&quot;co&quot;&gt;/*some message*/&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;conventions&quot;&gt;Conventions&lt;/h3&gt; &lt;p&gt;This library follows a specific convetion for its assertions. It&#39;s recommended that you follow these conventions when creating your own assertions, but feel free to come up with your own.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The last item is an &lt;em&gt;operator string&lt;/em&gt;, which is used for the TAP protocol and can be overridden.&lt;/li&gt; &lt;li&gt;The next-to-last item is a &lt;em&gt;default expected message&lt;/em&gt; that can also be overridden.&lt;/li&gt; &lt;li&gt;The preceeding arguments are given conditions to be tested.&lt;/li&gt; &lt;li&gt;The returned TestError is constructed using the default expected message along with an object detailing the difference between what&#39;s expected and what&#39;s not.&lt;/li&gt; &lt;/ul&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; TestError &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./testerror.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; assertion &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;co&quot;&gt;/*given conditions*/&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; message&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; operatorString)&lt;span class=&quot;op&quot;&gt;=&amp;gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;co&quot;&gt;/*conditions are met*/&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; message&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;TestError&lt;/span&gt;(message&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/*some object*/&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;testerror-api&quot;&gt;TestError API&lt;/h3&gt; &lt;p&gt;The test error is constructed with two items:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An expected messages&lt;/li&gt; &lt;li&gt;An object who&#39;s key-value pairs are displayed as part of TAP output&lt;/li&gt; &lt;/ul&gt; &lt;h1 id=&quot;tester-2&quot;&gt;Tester&lt;/h1&gt; &lt;p&gt;A context-independent testing framework inspired by &lt;a href=&quot;https://github.com/substack/tape&quot;&gt;tape&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;context-agnostic&quot;&gt;context-agnostic&lt;/h2&gt; &lt;p&gt;Tests run in same context as your application. No special executables needed.&lt;/p&gt; &lt;h2 id=&quot;tap-output&quot;&gt;TAP Output&lt;/h2&gt; &lt;p&gt;Tester outputs to the console using a partial implementation of the &lt;a href=&quot;https://testanything.org/tap-specification.html&quot;&gt;Test Anything Protocol&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;p&gt;The default export of ./index.mjs is an asynchronous function, &lt;em&gt;tester&lt;/em&gt;, that takes a test in the form of an asynchronous iterator.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tester &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;tester&lt;/span&gt;(async &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* define test here s*/&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;title&quot;&gt;Title&lt;/h3&gt; &lt;p&gt;Optionally &lt;em&gt;tester&lt;/em&gt; takes a string as it&#39;s first argument. This will be printed out before each test.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tester &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;tester&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;test title&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; async &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* define test here s*/&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;definition-and-format&quot;&gt;Definition and format&lt;/h3&gt; &lt;p&gt;When creating a test, simply yield the result of an assertion.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tester &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ok &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./assertions/ok.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;tester&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;test title&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; async &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ok&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;There are 7 built in assertions included alongside the default export for convinience.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tester&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; ok&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; notok&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; equal&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; notequal&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; deepequal&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; pass&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; fail&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;with-plan-argument&quot;&gt;with plan argument&lt;/h3&gt; &lt;p&gt;The first argument to the test is a &lt;em&gt;plan&lt;/em&gt; function which is used to announce then number of tests before they take place via TAP.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; tester &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; ok &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./assertions/ok.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;tester&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;test title&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; async &lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; (plan) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;plan&lt;/span&gt;(&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ok&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;assetions&quot;&gt;assetions&lt;/h2&gt; &lt;p&gt;Assertions are functions. They take any number of arguments and return either a success message string or an instance of TestError (&amp;quot;/testerror.mjs&amp;quot;).&lt;/p&gt; &lt;h3 id=&quot;included-assertions-1&quot;&gt;included assertions&lt;/h3&gt; &lt;h4 id=&quot;ok&quot;&gt;ok&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; ok &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;/index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;ok&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;notok&quot;&gt;notok&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; notok &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;/index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;notok&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;equal&quot;&gt;equal&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; equal &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;/index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;equal&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;notequal&quot;&gt;notequal&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; notequal &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;notequal&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;false&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;deepequal&quot;&gt;deepequal&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; deepequal &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;deepequal&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;dt&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;pass&quot;&gt;pass&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; pass &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;pass&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;fail&quot;&gt;fail&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; fail &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;fail&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;subtestpass&quot;&gt;subtestpass&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; subtestpass&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; pass &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;subtestpass&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;pass&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h4 id=&quot;subtestfail&quot;&gt;subtestfail&lt;/h4&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; subtestfail&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; fail &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; await &lt;span class=&quot;at&quot;&gt;subtestfail&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; () &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;fail&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt; (result &lt;span class=&quot;kw&quot;&gt;instanceof&lt;/span&gt; Error) &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;throw&lt;/span&gt; result&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;creating-external-assertions&quot;&gt;creating external assertions&lt;/h3&gt; &lt;p&gt;Assertions have the following general form:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; (...&lt;span class=&quot;at&quot;&gt;args&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;co&quot;&gt;/*test of args passes*/&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// return a string to indicate success.&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cf&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// return instance of TestError&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;taprunner-print-run&quot;&gt;TAPRunner, print, run&lt;/h2&gt; &lt;p&gt;The file &amp;quot;/TAPRunner.mjs&amp;quot; export methods &amp;quot;print&amp;quot; and &amp;quot;run&amp;quot;. &amp;quot;print&amp;quot; functions similarly to the default export of &amp;quot;index.mjs&amp;quot; -- both of which rely on &amp;quot;run&amp;quot; to execute underlying code.&lt;/p&gt; &lt;p&gt;When called with as single argument (a test), &amp;quot;run&amp;quot; yields only the results of the test (string or Error) without additional processing.&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "simple-element", "url": "js/simple-element/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;textelement&quot;&gt;textElement&lt;/h1&gt; &lt;p&gt;Create HTML Components using simple HTML Text strings.&lt;/p&gt; &lt;h2 id=&quot;creating-elements&quot;&gt;Creating elements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;The module provides two exports: &lt;em&gt;shadowOpen&lt;/em&gt; and &lt;em&gt;shadowClosed&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;Pass an HTML string to either to create an element derived from &lt;em&gt;globalThis.HTMLElement&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;Use the resulting class as the second argument to &lt;em&gt;globalThis.customElements.define&lt;/em&gt;.&lt;/li&gt; &lt;li&gt;Each can be used as a regular function or as a &lt;a href=&quot;https://2ality.com/2016/11/computing-tag-functions.html&quot;&gt;tag function&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;regular-function-usage&quot;&gt;Regular function usage&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; shadowOpen &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./textElement.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; HTMLString &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;&amp;lt;div&amp;gt;I am HTML&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; SampleElementClass &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;shadowOpen&lt;/span&gt;(HTMLString)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;sample-element&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; SampleElementClass)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;tag-function-usage&quot;&gt;Tag function usage&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; shadowClosed &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;./textElement.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;( &lt;span class=&quot;st&quot;&gt;&amp;quot;sample-element&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; shadowClosed&lt;span class=&quot;vs&quot;&gt;`&amp;lt;div&amp;gt;I am HTML&amp;lt;/div&amp;gt;`&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;shadowopen-vs-shadowclosed&quot;&gt;shadowOpen vs shadowClosed&lt;/h3&gt; &lt;p&gt;&lt;em&gt;shadowOpen&lt;/em&gt; creates an element with an accessible shadowRoot.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;( &lt;span class=&quot;st&quot;&gt;&amp;quot;open-element&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; shadowOpen&lt;span class=&quot;vs&quot;&gt;`&amp;lt;div&amp;gt;I am open&amp;lt;/div&amp;gt;`&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//...&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;open-element&amp;quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;shadowRoot&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//Logs element&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;&lt;em&gt;shadowClosed&lt;/em&gt; creates an element with an inaccessible shadowRoot.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;( &lt;span class=&quot;st&quot;&gt;&amp;quot;closed-element&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; shadowClosed&lt;span class=&quot;vs&quot;&gt;`&amp;lt;div&amp;gt;I am open&amp;lt;/div&amp;gt;`&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//...&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;( &lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getElementsByTagName&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;closed-element&amp;quot;&lt;/span&gt;)[&lt;span class=&quot;dv&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;at&quot;&gt;shadowRoot&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;//Logs null&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;composing-elements&quot;&gt;Composing elements&lt;/h2&gt; &lt;p&gt;Use the &lt;em&gt;slot&lt;/em&gt; element within the HTML string to allow for other HTML elements to be embedded.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;( &lt;span class=&quot;st&quot;&gt;&amp;quot;composable-element&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; shadowOpen&lt;span class=&quot;vs&quot;&gt;`&amp;lt;div&amp;gt;&amp;lt;slot /&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;composable-element&amp;gt;&lt;/span&gt; I&amp;#39;m dynamic content &lt;span class=&quot;kw&quot;&gt;&amp;lt;/composable-element&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Renders like:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;I&amp;#39;m dynamic content&lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;named-slots&quot;&gt;Named Slots&lt;/h3&gt; &lt;p&gt;Used named slots to place multiple pieces content within an element.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;( &lt;span class=&quot;st&quot;&gt;&amp;quot;composable-element&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; shadowOpen&lt;span class=&quot;vs&quot;&gt;`&amp;lt;slot name=&amp;quot;first&amp;quot; /&amp;gt;&amp;lt;slot name=&amp;quot;second&amp;quot; /&amp;gt;`&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;composable-element&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; slot=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;second&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;2nd&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; slot=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;first&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;1st&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/composable-element&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;Renders like:&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;1st&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;br&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;2nd&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;styling-elements&quot;&gt;Styling Elements&lt;/h2&gt; &lt;p&gt;Elements can be styled by adding a &lt;em&gt;style&lt;/em&gt; tag to the HTML string.&lt;/p&gt; &lt;p&gt;Because the style tag exists within the shadowRoot, styles will only be applied within the element.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; RedTextClass &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; shadowOpen&lt;span class=&quot;vs&quot;&gt;`&amp;lt;style&amp;gt;*{color:red}&amp;lt;/style&amp;gt;&amp;lt;slot /&amp;gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;styling-slotted-elements&quot;&gt;Styling slotted elements&lt;/h3&gt; &lt;p&gt;Slotted elements exist outside of the shadowRoot and can be styled outside of the element.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;red-element&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; RedTextClass)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;.blue&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;blue&lt;/span&gt;; } &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;red-element&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;span&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;This text is blue&lt;span class=&quot;kw&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/red-element&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;using-part-sudo-element&quot;&gt;Using ::part() sudo-element&lt;/h3&gt; &lt;p&gt;Parts of the element intended to be the target of external styles can be marked with the &lt;em&gt;part&lt;/em&gt; attribute.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;#39;stylable-element&amp;#39;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; shadowOpen&lt;span class=&quot;vs&quot;&gt;`&amp;lt;div part=content&amp;gt; I&amp;#39;m stylable externally&amp;lt;/div&amp;gt;`&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt; stylable-element&lt;span class=&quot;in&quot;&gt;::&lt;/span&gt;part(content) { &lt;span class=&quot;kw&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;blue&lt;/span&gt;; } &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;stylable-element&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "returnTimeout", "url": "js/returnTimeout/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h2 id=&quot;returntimeout&quot;&gt;returnTimeout&lt;/h2&gt; &lt;p&gt;&lt;code&gt;returnTimeout&lt;/code&gt; has a similar API to set the built-in &lt;code&gt;setTimeout&lt;/code&gt; function. Instead of returning and ID of a timeout, it returns a promise fulfilled with the value of the function when called.&lt;/p&gt; &lt;p&gt;Note: there is currently no official way to cancel a promise in javascript.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; returnTimeout &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; joinStrs &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (...&lt;span class=&quot;at&quot;&gt;str&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;str&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(await &lt;span class=&quot;at&quot;&gt;returnTimeout&lt;/span&gt;(joinStrs&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;4500&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// logs hello world after 4.5 seconds&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "consent-buddy", "url": "js/consent-buddy/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;consent-buddy&quot;&gt;Consent Buddy&lt;/h1&gt; &lt;p&gt;Consent buddy provides a mechanism to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;accept a user&#39;s response to a request for consent and via prompt (via DOM events)&lt;/li&gt; &lt;li&gt;handle said response (generically)&lt;/li&gt; &lt;li&gt;handle visibility of said dialog (via css custom property)&lt;/li&gt; &lt;li&gt;record and replay the response without re-promppting the user (via local storage)&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "mod", "url": "js/mod/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;mod&quot;&gt;mod&lt;/h1&gt; &lt;p&gt;The modulus operator (%&#39;) in math works slightly differently than it does in javascript (%). That is in math, it&#39;s a binary operation that returns a positive number. In javascript, the number can be negative. This &amp;quot;mod&amp;quot; function works &lt;em&gt;more&lt;/em&gt; like the math version.&lt;/p&gt; &lt;p&gt;mod = (a, b) =&amp;gt; a %&#39; b&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "localstorage-cycler", "url": "js/localstorage-cycler/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;localstorage-cycler&quot;&gt;LocalStorage Cycler&lt;/h1&gt; &lt;p&gt;Cycle local storage values through a given list of strings&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; localStorageCycler &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;?&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; updateLocalStorage &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;localStorageCycler&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;my-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The call to &amp;quot;localStorageCycler&amp;quot; checks for the existence of the key (&amp;quot;my-key&amp;quot;) in localStorage. and sets it to the first key (&amp;quot;a&amp;quot;) if not already set.&lt;/p&gt; &lt;p&gt;When called, the &amp;quot;updateLocalStorage&amp;quot; function cycles the value associated with the key in localStorage through the given values (&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, and &amp;quot;c&amp;quot;).&lt;/p&gt; &lt;p&gt;The &amp;quot;updateLocalStorage&amp;quot; returns an object with the following keys:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;key - the associated local storage key&lt;/li&gt; &lt;li&gt;value - the current value of the local storage item&lt;/li&gt; &lt;li&gt;index - the current index of the local storage item&lt;/li&gt; &lt;li&gt;result - the reuslt of an handler, if passed (see below)&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;change-handler&quot;&gt;Change Handler&lt;/h2&gt; &lt;p&gt;To react to the change, pass a optional change handler as the second parameter to &amp;quot;localStorageCycler&amp;quot;.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; onChange &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; events &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; value&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; key&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; events &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;const&lt;/span&gt; updateLocalStorage &lt;span class=&quot;op&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;localStorageCycler&lt;/span&gt;( &lt;span class=&quot;st&quot;&gt;&amp;quot;my-key&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; onChange&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;c&amp;quot;&lt;/span&gt; )&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;p&gt;The handler takes four parametes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;p&gt;the same, &amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;, and &amp;quot;index&amp;quot; parameters returned from calling &amp;quot;updateLocalStorage&amp;quot;&lt;/p&gt;&lt;/li&gt; &lt;li&gt;&lt;p&gt;an &amp;quot;events&amp;quot; parameter -- an array of everything passed into the &amp;quot;updateLocalStorage&amp;quot; function OR an &amp;quot;init&amp;quot; CustomEvent if fired from the initial call to localStorageCycler.&lt;/p&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "symver-compare@latest", "url": "js/symver-compare@latest/", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;ul&gt;&lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "random-generators", "url": "js/random-generators/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;random-generators&quot;&gt;Random Generators&lt;/h1&gt; &lt;p&gt;These are methods of generating a sample, &lt;em&gt;x&lt;/em&gt;, for a given random variable, &lt;em&gt;X&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;No guarantees are made as to the distribution of the random variable.&lt;/strong&gt;&lt;/p&gt; &lt;h2 id=&quot;float&quot;&gt;Float&lt;/h2&gt; &lt;h3 id=&quot;x-0-1&quot;&gt;X := [ 0, 1 )&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;()&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// R&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;x-0-1-1&quot;&gt;X := ( 0, 1 ]&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// -(R-1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;x-0-n&quot;&gt;X := [ 0, N )&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;(N) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; N&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// R*N&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;x-m-n&quot;&gt;X := [ M, N )&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;(M&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; N) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; (N &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; M) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; M&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// R*(N-M)+M&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;x-1-infinity&quot;&gt;X := [ 1, Infinity )&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;-1&lt;/span&gt; / (&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// -1/(R-1)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;x-1-infinity-1&quot;&gt;X := ( 1, Infinity ]&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;**&lt;/span&gt; (&lt;span class=&quot;op&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt; / &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;())&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// R^(-1/R)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;integer&quot;&gt;Integer&lt;/h2&gt; &lt;h3 id=&quot;x-1-n&quot;&gt;X := [ 1, N ]&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;(N) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;ceil&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; N)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// ⌈R*N⌉&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;x-0-n-1&quot;&gt;X := [ 0, N ]&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;(N) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; N &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// ⌊R*N+1⌋&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;x-m-n-1&quot;&gt;X := [ M, N ]&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;(M&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; N) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; (N &lt;span class=&quot;op&quot;&gt;-&lt;/span&gt; M &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;dv&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;+&lt;/span&gt; M)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// ⌊R*(N-M)+N⌋&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;boolean&quot;&gt;Boolean&lt;/h2&gt; &lt;h3 id=&quot;x-true-false&quot;&gt;X := { true, false }&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;() &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;fl&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// R&amp;lt;0.5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;multiset-array&quot;&gt;Multiset (Array)&lt;/h2&gt; &lt;h3 id=&quot;x-array-any&quot;&gt;X := []:Array&amp;lt; any &amp;gt;&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;(...&lt;span class=&quot;at&quot;&gt;A&lt;/span&gt;) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; A[&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;floor&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;Math&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;random&lt;/span&gt;() &lt;span class=&quot;op&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;A&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;length&lt;/span&gt;)]&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// A[⌊R*|A|⌋]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h2 id=&quot;bytes&quot;&gt;Bytes&lt;/h2&gt; &lt;h3 id=&quot;x-typedarray-number-n&quot;&gt;X := TypedArray&amp;lt; number &amp;gt;(N)&lt;/h3&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;(N) &lt;span class=&quot;op&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;crypto&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;getRandomValues&lt;/span&gt;(&lt;span class=&quot;kw&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;Uint8ClampedArray&lt;/span&gt;(N))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;// g(N)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "broadcast-channel-worker", "url": "js/broadcast-channel-worker/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;broadcast-channel-worker&quot;&gt;Broadcast Channel Worker&lt;/h1&gt; &lt;p&gt;Communicate across windows&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "define-component.component", "url": "js/define-component.component/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;define-component&quot;&gt;Define Component&lt;/h1&gt; &lt;p&gt;HTML Component to define HTML components.&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;h3 id=&quot;maunal&quot;&gt;Maunal&lt;/h3&gt; &lt;p&gt;Define class to be removed&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode js&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;co&quot;&gt;// file:///./custom-component.mjs&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;extends&lt;/span&gt; HTMLElement &lt;span class=&quot;op&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;///...&lt;/span&gt; &lt;span class=&quot;op&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; defineComponent &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;https://johnhenry.github.io/lib/define-component.component/0.0.0/index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;globalThis&lt;/span&gt;.&lt;span class=&quot;va&quot;&gt;customElements&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;define&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;define-component&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;,&lt;/span&gt; defineComponent)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;define-component&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;custom-component&amp;quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;./custom-component.mjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/define-component&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;custom-component&amp;gt;&amp;lt;/custom-component&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;automatic&quot;&gt;Automatic&lt;/h3&gt; &lt;p&gt;Use &amp;quot;global&amp;quot; import to automatically use component name &amp;quot;define-component&amp;quot;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;https://johnhenry.github.io/lib/define-component.component/0.0.0/global.mjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;define-component&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;custom-component&amp;quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;./custom-component.mjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/define-component&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;custom-component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;loading&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;Hide me until window load&lt;span class=&quot;kw&quot;&gt;&amp;lt;/custom-component&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "cbor", "url": "js/cbor/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;concise-binary-object-representation-cbor&quot;&gt;Concise Binary Object Representation (CBOR)&lt;/h1&gt; &lt;p&gt;Based on the specification &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc8949&quot;&gt;here&lt;/a&gt;&lt;/p&gt; &lt;p&gt;(&lt;a href=&quot;https://www.ietf.org/id/draft-ietf-cbor-7049bis-14.txt&quot;&gt;old&lt;/a&gt;)&lt;/p&gt; &lt;h2 id=&quot;api&quot;&gt;API&lt;/h2&gt; &lt;h3 id=&quot;encode-function&quot;&gt;encode function&lt;/h3&gt; &lt;h3 id=&quot;decode-function&quot;&gt;decode function&lt;/h3&gt; &lt;h3 id=&quot;tag-class&quot;&gt;Tag class&lt;/h3&gt; &lt;h2 id=&quot;types&quot;&gt;Types&lt;/h2&gt; &lt;h3 id=&quot;booleans-null-undefined&quot;&gt;Booleans, null, undefined&lt;/h3&gt; &lt;h3 id=&quot;numbers&quot;&gt;Numbers&lt;/h3&gt; &lt;h3 id=&quot;strings&quot;&gt;Strings&lt;/h3&gt; &lt;p&gt;// NOTE: emoji don&#39;t work -- represented by more than one byte // const input =&amp;quot;☃★♲&amp;quot;;&lt;/p&gt; &lt;h3 id=&quot;bytes&quot;&gt;Bytes&lt;/h3&gt; &lt;h3 id=&quot;integers&quot;&gt;Integers&lt;/h3&gt; &lt;h3 id=&quot;arrays&quot;&gt;Arrays&lt;/h3&gt; &lt;h3 id=&quot;objectsmaps&quot;&gt;Objects/Maps&lt;/h3&gt; &lt;h3 id=&quot;tags&quot;&gt;Tags&lt;/h3&gt; &lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt; &lt;p&gt;deno run --allow-read test.mjs&lt;/p&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "DOM-nodes-to-text", "url": "js/DOM-nodes-to-text/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;dom-nodes-to-text&quot;&gt;Dom Nodes to text&lt;/h1&gt; &lt;p&gt;Transform dom nodes into text.&lt;/p&gt; &lt;p&gt;This is extremely useful when logging DOM nodes as they are often logged &amp;quot;live&amp;quot; meaning that when you look at the console, you will see the latest state; not the state at the time of logging.&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;ul&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; id=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;list&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;one&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;two&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;three&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; domNodesToText &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;domNodesToText&lt;/span&gt;(&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;querySelector&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;#list&amp;quot;&lt;/span&gt;)))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* logs&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; &amp;lt;ul id=&amp;quot;li&amp;quot;&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; &amp;lt;li&amp;gt;one&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; &amp;lt;li&amp;gt;two&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; &amp;lt;li&amp;gt;three&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; &amp;lt;/ul&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; */&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;multiple-nodes&quot;&gt;Multiple Nodes&lt;/h3&gt; &lt;p&gt;Use the spread operatore to turn lists of nodes into text&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode javascript&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;va&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;at&quot;&gt;domNodesToText&lt;/span&gt;(...&lt;span class=&quot;va&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;at&quot;&gt;querySelectorAll&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;li&amp;quot;&lt;/span&gt;)))&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt;/* logs&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; &amp;lt;li&amp;gt;one&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; &amp;lt;li&amp;gt;two&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; &amp;lt;li&amp;gt;three&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;co&quot;&gt; */&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "until-window-load", "url": "js/until-window-load/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;until-window-load&quot;&gt;Until Window Load&lt;/h1&gt; &lt;p&gt;Declarative import to remove loading classes once the window has loaded.&lt;/p&gt; &lt;p&gt;Useful for to avoid content flash for custom components that arrange content after loading.&lt;/p&gt; &lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt; &lt;h3 id=&quot;maunal&quot;&gt;Maunal&lt;/h3&gt; &lt;p&gt;Define class to be removed&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode js&quot;&gt;&lt;code class=&quot;sourceCode javascript&quot;&gt;&lt;span class=&quot;im&quot;&gt;import&lt;/span&gt; removeLoadingClasses &lt;span class=&quot;im&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;st&quot;&gt;&amp;quot;https://johnhenry.github.io/lib/remove-loading-classes/0.0.0/index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;at&quot;&gt;removeLoadingClasses&lt;/span&gt;(&lt;span class=&quot;st&quot;&gt;&amp;quot;custom-loading-class&amp;quot;&lt;/span&gt;)&lt;span class=&quot;op&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode css&quot;&gt;&lt;code class=&quot;sourceCode css&quot;&gt;&lt;span class=&quot;fu&quot;&gt;.custom-loading-class&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;visibility&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;hidden&lt;/span&gt;; }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;custom-component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;custom-loading-class&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;Hide me until window load&lt;span class=&quot;kw&quot;&gt;&amp;lt;/custom-component&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;h3 id=&quot;automatic&quot;&gt;Automatic&lt;/h3&gt; &lt;p&gt;Use &amp;quot;global&amp;quot; import to automatically use class name &amp;quot;until-window-load&amp;quot;&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;https://johnhenry.github.io/lib/remove-loading-classes/0.0.0/global.mjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt; &lt;span class=&quot;fu&quot;&gt;.until-window-load&lt;/span&gt; { &lt;span class=&quot;kw&quot;&gt;visibility&lt;/span&gt;: &lt;span class=&quot;dv&quot;&gt;hidden&lt;/span&gt;; } &lt;span class=&quot;kw&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;custom-component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; class=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;until-window-load&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;Hide me until window load&lt;span class=&quot;kw&quot;&gt;&amp;lt;/custom-component&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " }, { "title": "query-container.component", "url": "js/query-container.component/0.0.0", "content": "&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt; &lt;/head&gt; &lt;body&gt;&lt;h1 id=&quot;query-container-html-component&quot;&gt;Query Container HTML Component&lt;/h1&gt; &lt;p&gt;Containter that changes based on a given media query&lt;/p&gt; &lt;p&gt;Inspired by: https://github.com/tabvengers/spicy-sections&lt;/p&gt; &lt;h2 id=&quot;example-usage-usage&quot;&gt;Example usage Usage&lt;/h2&gt; &lt;p&gt;Single query:&lt;/p&gt; &lt;p&gt;This following will produce an ordered list with class name &#39;ordered&#39; and blue text when the window&#39;s width is between 400px and 900px.&lt;/p&gt; &lt;div class=&quot;sourceCode&quot;&gt;&lt;pre class=&quot;sourceCode html&quot;&gt;&lt;code class=&quot;sourceCode html&quot;&gt;&lt;span class=&quot;kw&quot;&gt;&amp;lt;script&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; type=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;https://johnhenry.github.io/lib/js/define-component.component/0.0.0/global.mjs&amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;define-component&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; name=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;query-component&amp;quot;&lt;/span&gt;&lt;span class=&quot;ot&quot;&gt; src=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;./index.mjs&amp;quot;&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;&amp;gt;&amp;lt;/define-component&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;query-component&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; default=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;ul&amp;quot;&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt; query=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;st&quot;&gt; [(min-width:300px) and (max-width:1200px)] ol.ordered[style=color:blue];&lt;/span&gt; &lt;span class=&quot;st&quot;&gt; [(min-width:400px) and (max-width:600px)] ol.ordered[style=color:red];&lt;/span&gt; &lt;span class=&quot;st&quot;&gt; &amp;quot;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;a&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;b&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;c&lt;span class=&quot;kw&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;lt;/query-component&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/body&gt; &lt;/html&gt; " } ]
