{
  "title": "random-generators",
  "url": "js/random-generators/0.0.0",
  "content": "         &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt;         # Random Generators    These are methods of generating a sample,  x , for a given random variable,  X .    No guarantees are made as to the distribution of the random variable.    Float   X := [ 0, 1 )     ()  =&gt;   Math . random () ;   // R      X := ( 0, 1 ]     ()  =&gt;   - ( Math . random ()  -   1 ) ;   // -(R-1)      X := [ 0, N )     (N)  =&gt;   Math . random ()  *  N ;   // R*N      X := [ M, N )     (M ,  N)  =&gt;   Math . random ()  *  (N  -  M)  +  M ;   // R*(N-M)+M      X := [ 1, Infinity )     ()  =&gt;   -1  / ( Math . random ()  -   1 ) ;   // -1/(R-1)      X := ( 1, Infinity ]     ()  =&gt;   Math . random ()  **  ( -  1  /  Math . random ()) ;   // R^(-1/R)      Integer   X := [ 1, N ]     (N)  =&gt;   Math . ceil ( Math . random ()  *  N) ;   // ⌈R*N⌉      X := [ 0, N ]     (N)  =&gt;   Math . floor ( Math . random ()  *  N  +   1 ) ;   // ⌊R*N+1⌋      X := [ M, N ]     (M ,  N)  =&gt;   Math . floor ( Math . random ()  *  (N  -  M  +   1 )  +  M) ;   // ⌊R*(N-M)+N⌋      Boolean   X := { true, false }     ()  =&gt;   Math . random ()  &lt;   0.5  ;   // R&lt;0.5      Multiset (Array)   X := []:Array&lt; any &gt;     (... A )  =&gt;  A[ Math . floor ( Math . random ()  *   A . length )] ;   // A[⌊R*|A|⌋]      Bytes   X := TypedArray&lt; number &gt;(N)     (N)  =&gt;   globalThis . crypto . getRandomValues ( new   Uint8ClampedArray (N)) ;   // g(N)         "
}
