{
  "title": "simple-element",
  "url": "js/simple-element/0.0.0",
  "content": "         &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt;         # textElement    Create HTML Components using simple HTML Text strings.   Creating elements     The module provides two exports:  shadowOpen  and  shadowClosed .   Pass an HTML string to either to create an element derived from  globalThis.HTMLElement .   Use the resulting class as the second argument to  globalThis.customElements.define .   Each can be used as a regular function or as a  tag function .     Regular function usage      import   {  shadowOpen  }   from   &quot;./textElement.mjs&quot;  ;   const  HTMLString  =   &quot;&lt;div&gt;I am HTML&lt;/div&gt;&quot;  ;   const  SampleElementClass  =   shadowOpen (HTMLString) ;   globalThis . customElements . define ( &quot;sample-element&quot;  ,  SampleElementClass) ;      Tag function usage      import   {  shadowClosed  }   from   &quot;./textElement.mjs&quot;  ;   globalThis . customElements . define (  &quot;sample-element&quot;  ,  shadowClosed `&lt;div&gt;I am HTML&lt;/div&gt;`  ) ;      shadowOpen vs shadowClosed    shadowOpen  creates an element with an accessible shadowRoot.      globalThis . customElements . define (  &quot;open-element&quot;  ,  shadowOpen `&lt;div&gt;I am open&lt;/div&gt;`  ) ;   //...   globalThis . console . log (  globalThis . document . getElementsByTagName ( &quot;open-element&quot; )[ 0 ]. shadowRoot  ) ;   //Logs element       shadowClosed  creates an element with an inaccessible shadowRoot.      globalThis . customElements . define (  &quot;closed-element&quot;  ,  shadowClosed `&lt;div&gt;I am open&lt;/div&gt;`  ) ;   //...   globalThis . console . log (  globalThis . document . getElementsByTagName ( &quot;closed-element&quot; )[ 0 ]. shadowRoot  ) ;   //Logs null      Composing elements   Use the  slot  element within the HTML string to allow for other HTML elements to be embedded.      globalThis . customElements . define (  &quot;composable-element&quot;  ,  shadowOpen `&lt;div&gt;&lt;slot /&gt;&lt;/div&gt;`  ) ;         &lt;composable-element&gt;  I&#39;m dynamic content  &lt;/composable-element&gt;      Renders like:      &lt;div&gt; I&#39;m dynamic content &lt;/div&gt;      Named Slots   Used named slots to place multiple pieces content within an element.      globalThis . customElements . define (  &quot;composable-element&quot;  ,  shadowOpen `&lt;slot name=&quot;first&quot; /&gt;&lt;slot name=&quot;second&quot; /&gt;`  ) ;         &lt;composable-element&gt;   &lt;span   slot=  &quot;second&quot;  &gt; 2nd &lt;/span&gt;   &lt;span   slot=  &quot;first&quot;  &gt; 1st &lt;/span&gt;   &lt;/composable-element&gt;      Renders like:      &lt;div&gt;   &lt;span&gt; 1st &lt;/span&gt;   &lt;br   /&gt;   &lt;span&gt; 2nd &lt;/span&gt;   &lt;/div&gt;      Styling Elements   Elements can be styled by adding a  style  tag to the HTML string.   Because the style tag exists within the shadowRoot, styles will only be applied within the element.      const  RedTextClass  =  shadowOpen `&lt;style&gt;*{color:red}&lt;/style&gt;&lt;slot /&gt;`  ;      Styling slotted elements   Slotted elements exist outside of the shadowRoot and can be styled outside of the element.      globalThis . customElements . define ( &quot;red-element&quot;  ,  RedTextClass) ;         &lt;style&gt;   .blue  {  color :  blue ; }  &lt;/style&gt;   &lt;red-element&gt;   &lt;span   class=  &quot;blue&quot;  &gt; This text is blue &lt;/span&gt;   &lt;/red-element&gt;      Using ::part() sudo-element   Parts of the element intended to be the target of external styles can be marked with the  part  attribute.      globalThis . customElements . define ( &#39;stylable-element&#39;  ,  shadowOpen `&lt;div part=content&gt; I&#39;m stylable externally&lt;/div&gt;`  ;         &lt;style&gt;  stylable-element :: part(content) {  color :  blue ; }  &lt;/style&gt;   &lt;stylable-element   /&gt;         "
}
