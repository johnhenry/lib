{
  "title": "negatablestring",
  "url": "js/negatablestring/0.0.0",
  "content": "         &lt;title&gt;John Henry&lt;/title&gt; &lt;link rel=&quot;canonical&quot; href=&quot;https://johnhenry.github.io/&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;John Henry&#39;s Person Portfolio and Blog&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot; /&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#343233&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;meta name=&quot;keywords&quot; content=&quot;fun,math,engineering,science,experiments,programming&quot; /&gt; &lt;meta name=&quot;author&quot; content=&quot;John Henry&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;https://johnhenry.github.io/image/iajh.png&quot; type=&quot;image/png&quot; /&gt;         # Negatable Strings    Ever wanted to literally subtract a string from another in your code? Eh,... didn't thinks so...   But here's library that let's do that and then some!   API   String.prototype;   Import the string polyfill to use library with regular strings.      import   &quot;./string-prototype.mjs&quot;  ;      scale;      import   {  scale  }   from   &quot;./index.mjs&quot;  ;      The  scale  function transfroms a string into a negatable string object.   By default, the string representations are the same.      &quot;string&quot;   ===   scale ( &quot;string&quot; ). toString () ;      Negative one (-1) can be passed as a second parameter to get a negated version of the given string&quot;      &quot;string&quot;   ===   scale ( &quot;string&quot;  ,   -1 ). toString (). split ( &quot;&quot; ). reverse (). join ( &quot;&quot; ) ;      NegatableString.prototype.toString();   By default, the string representation is simply the representation of the given string backwards.      console . log ( scale ( &quot;string&quot;  ,   -1 ). toString ()) ;   // logs &quot;rts&quot;      But this is not the full story. Negative characters chan be highlighted by passing a prefix parameter to  toString  method      console . log ( scale ( &quot;string&quot;  ,   -1 ). toString ( &quot;~&quot; )) ;   // logs &quot;~r~t~s&quot;      Prefixes and suffixes can be added for both &quot;negative&quot; and &quot;positive&quot; characters      const  nPrefix  =   &#39;&lt;span class=&quot;positive&quot;&gt;&#39;  :   const  pPrefix  =   &#39;&lt;span class=&quot;negative&quot;&gt;&#39;  :   const  suffix  =   &#39;&lt;/span&gt;&#39;  :   console ( scale ( &quot;string&quot;  ,   -1 ). toString (nPrefix ,  suffix ,  pPrefix ,  suffix)) ;   // logs &quot;&lt;span class=&quot;negative&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;negative&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;negative&quot;&gt;s&lt;/span&gt;&quot;      NegatableString.prototype.consoleIterator();   Some consoles (Chrome, Deno, but not currently node) have log methods that allow styling accepting as their first argument a specifically formatted string; and as their subsequent arguements, style parameters.   The &quot;consoleIterator&quot; method takes advantage of this. It produces an object that can be destructured into a call to console.log that will produced a result with characters colored according to their parity.      console . log (... scale ( &quot;rts&quot;  ,   -1 ). consoleIterator ( &quot;red&quot; )) ;   // logs red &quot;rts&quot; on chrome and deno   // logs unformatted &quot;rts&quot; on node      Complex example multipe strings with consoleIterator;      const  HELLO  =   &quot;HELLO&quot;  ;   const  GOODBYE  =   scale ( &quot;HELLO&quot;  ,   -1 ) ;   const  COMBO  =   concat (HELLO ,  GOODBYE) ;   const  [string0 ,  ... colors0 ]  =   HELLO . consoleIterator () ;   const  [string1 ,  ... colors1 ]  =   GOODBYE . consoleIterator () ;   const  [string2 ,  ... colors2 ]  =   COMBO . consoleIterator () ;   console . log (... HELLO . consoleIterator ()) ;   console . log (... GOODBYE . consoleIterator ()) ;   console . log (... COMBO . consoleIterator ()) ;   console . log (  `(&quot;  ${ string0 }  &quot; + &quot;  ${ string1 }  &quot;) = &quot;  ${ string2 }  &quot;`  ,  ... colors0  ,  ... colors1  ,  ... colors2  ) ;   // logs &quot;      concat   Concatenating string with negative characters is where the magic happens.      import   {  concat  }   from   &quot;./index.mjs&quot;  ;         console . log ( concat ( &quot;hello&quot;  ,   scale ( &quot;hello&quot;  ,   -1 )). toString ()) ;   //logs &quot;&quot;   console . log (  concat ( scale ( &quot;http://&quot;  ,   -1 ) ,   &quot;https://iamjohnhenry.com&quot; ). toString () ) ;   //logs &quot;https://iamjohnhenry.com&quot;      negater   You may want to construct string where not all characters are negative or positive.      import   {  negater  }   from   &quot;./index.mjs&quot;  ;         console . log ( negater ( &quot;mi~ss~issippi&quot; ). toString ( &quot;~&quot; )) ;   //logs &quot;mssippi&quot;. Note the ~s cancelled out the s and then the i cancelled the ~i         console . log ( negater ( &quot;mi~ss~issippi&quot; ). toString ( &quot;~&quot; )) ;   //logs &quot;mssippi&quot;. Note the ~s cancelled out the s and then the i cancelled the ~i      equals   Test if two strings represent the exact same charcters, in the same order, with the same parity      import   {  equal  }   from   &quot;./index.mjs&quot;  ;         console . log ( equal ( &quot;alpha&quot;  ,   scale ( &quot;alpha&quot; ))) ;   // true   console . log ( equal ( &quot;beta&quot;  ,   scale ( &quot;beta&quot;  ,   -1 ))) ;   //false         "
}
